package dk.frv.eavdam.menus;import dk.frv.eavdam.data.ActiveStation;import dk.frv.eavdam.data.Address;import dk.frv.eavdam.data.AISAtonStationFATDMAChannel;import dk.frv.eavdam.data.AISBaseAndReceiverStationFATDMAChannel;import dk.frv.eavdam.data.AISFixedStationData;import dk.frv.eavdam.data.AISFixedStationStatus;import dk.frv.eavdam.data.AISFixedStationType;import dk.frv.eavdam.data.Antenna;import dk.frv.eavdam.data.AntennaType;import dk.frv.eavdam.data.AtonMessageBroadcastRate;import dk.frv.eavdam.data.EAVDAMData;import dk.frv.eavdam.data.EAVDAMUser;import dk.frv.eavdam.data.FATDMACell;import dk.frv.eavdam.data.FATDMAChannel;import dk.frv.eavdam.data.FATDMADefaultChannel;import dk.frv.eavdam.data.FATDMANode;import dk.frv.eavdam.data.FATDMAReservation;import dk.frv.eavdam.data.OtherUserStations;import dk.frv.eavdam.data.Person;import dk.frv.eavdam.data.Simulation;import dk.frv.eavdam.data.TimeslotReservation;import dk.frv.eavdam.io.DefaultFATDMAReader;import dk.frv.eavdam.io.XMLExporter;import dk.frv.eavdam.io.XMLImporter;import dk.frv.eavdam.io.derby.DerbyDBInterface;import dk.frv.eavdam.layers.FATDMAGridLayer;import dk.frv.eavdam.utils.DBHandler;import dk.frv.eavdam.utils.ImageHandler;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Component;import java.awt.Dimension;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Image;import java.awt.Insets;import java.awt.Point;import java.awt.Toolkit;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.awt.event.WindowEvent;import java.awt.event.WindowListener;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.DataInputStream;import java.io.File;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.FileWriter;import java.io.InputStreamReader;import java.net.MalformedURLException;import java.sql.Date;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.AbstractButton;import javax.swing.BorderFactory;import javax.swing.ButtonGroup;import javax.swing.ImageIcon;import javax.swing.ComboBoxEditor;import javax.swing.JButton;import javax.swing.JCheckBox;import javax.swing.JComboBox;import javax.swing.JComponent;import javax.swing.JDialog;import javax.swing.GroupLayout;import javax.swing.GroupLayout.Alignment;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JRadioButton;import javax.swing.JScrollPane;import javax.swing.JTabbedPane;import javax.swing.JTextArea;import javax.swing.JTextField;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.border.EmptyBorder;import javax.swing.event.ChangeEvent;import javax.swing.event.ChangeListener;import javax.swing.event.DocumentEvent;import javax.swing.event.DocumentListener;import javax.xml.bind.JAXBException;public class StationInformationMenuItem implements ActionListener, ChangeListener, DocumentListener, ItemListener, WindowListener {	public static int WINDOW_WIDTH = 1020;	public static int WINDOW_HEIGHT = 1000;	    public final static String OWN_ACTIVE_STATIONS_LABEL = "Own active stations";    public final static String SIMULATION_LABEL = "Simulation";    public final static String STATIONS_OF_ORGANIZATION_LABEL = "Stations of organization";    public final static String PROPOSAL_FROM_LABEL = "Proposal from";    public final static String PROPOSAL_TO_LABEL = "My proposal";    public final static String OPERATIVE_LABEL = "Operative";    public final static String PLANNED_LABEL = "Planned";    public final static String SIMULATED_LABEL = "Simulated";    private EavdamMenu eavdamMenu;    private JDialog dialog;    private JPanel selectStationPanel;    private JTabbedPane tabbedPane;        private JComboBox selectDatasetComboBox;	private JButton viewContactInformationButton;    private JButton deleteSimulationButton;    private JTextField newSimulationTextField;    private JButton addNewSimulationButton;        private JComboBox selectStationComboBox;    private JButton addStationButton;    private AddStationDialog addStationDialog;        private JTextField stationNameTextField;    private JComboBox stationTypeComboBox;    private JTextField latitudeTextField;    private JTextField longitudeTextField;        private JTextField mmsiNumberTextField;    private JTextField transmissionPowerTextField;        private JComboBox antennaTypeComboBox;    private JTextField antennaHeightTextField;    private JTextField terrainHeightTextField;        private JTextField headingTextField;    private JTextField fieldOfViewAngleTextField;    private JTextField gainTextField;   		private JPanel fatdmaPanel;	private JComboBox channelAComboBox;	private JScrollPane channelAScrollPane;	private JPanel channelAPanel;	private JComboBox channelBComboBox;	private JScrollPane channelBScrollPane;	private JPanel channelBPanel;	    	private JButton chooseDefaultFATDMASchemeButton;	private JDialog chooseDefaultFATDMASchemeDialog;	private JComboBox selectIALADefaultFATDMASchemeComboBox;	private JCheckBox baseStationReportInCheckBox;	private JRadioButton semaphoreModeRadioButton;	private JRadioButton nonSemaphoreModeRadioButton;	private JCheckBox fatdmaReservationOnChACheckBox;	private JCheckBox fatdmaReservationOnChBCheckBox;	private JCheckBox oneAdditionalTimeslotOnChACheckBox;	private JCheckBox oneAdditionalTimeslotOnChBCheckBox;	private JComboBox additionalBlocksForChAComboBox;	private JComboBox additionalBlocksForChBComboBox;	private JComboBox additionalTimeslotsForChAComboBox;	private JComboBox additionalTimeslotsForChBComboBox;	private JTextField chATimeslotsReservedTextField;	private JTextField chBTimeslotsReservedTextField;		private JLabel chATimeslotsReservedLabel;	private JLabel chBTimeslotsReservedLabel;		private JButton okDefaultFATDMASchemeButton;	private JButton cancelDefaultFATDMASchemeButton;		    private JTextArea additionalInformationJTextArea;      private JButton deleteButton;	private JButton addPlannedButton;    private JButton makeOperativeButton;    private JButton saveButton;    private JButton acceptProposalButton;    private JButton proposeChangesButton;    private JButton exitButton;        private EAVDAMData data;          private String initiallySelectedDataset;    private String initiallySelectedStationName;        public boolean ignoreListeners = false;    private int previouslySelectedStationIndex = -1;	private int oldStationTypeIndex = -1;	private int oldChannelAIndex = -1;	private int oldChannelBIndex = -1;		    public StationInformationMenuItem(EavdamMenu eavdamMenu, String dataset, String stationName) {        this.eavdamMenu = eavdamMenu;        this.initiallySelectedDataset = dataset;        this.initiallySelectedStationName = stationName;    }    	public EavdamMenu getEavdamMenu() {		return eavdamMenu;	}	    public void actionPerformed(ActionEvent e) {                if (ignoreListeners) {            return;        }        if (e.getSource() instanceof StationInformationMenu) {					Toolkit toolkit = Toolkit.getDefaultToolkit();			Dimension dimension = toolkit.getScreenSize();			if (dimension.width-100 < WINDOW_WIDTH) {				WINDOW_WIDTH = dimension.width-100;			}			if (dimension.width-100 < AddStationDialog.WINDOW_WIDTH) {				AddStationDialog.WINDOW_WIDTH = dimension.width-100;			}			if (dimension.height-100 < WINDOW_HEIGHT) {				WINDOW_HEIGHT = dimension.height-100;			}			if (dimension.height-100 < AddStationDialog.WINDOW_HEIGHT) {				AddStationDialog.WINDOW_HEIGHT = dimension.height-100;			}			            data = DBHandler.getData();	            selectDatasetComboBox = getComboBox(null);                        selectDatasetComboBox.addItem(StationInformationMenuItem.OWN_ACTIVE_STATIONS_LABEL);            if (data != null) {                if (data.getSimulatedStations() != null) {                    for (Simulation s : data.getSimulatedStations()) {                        selectDatasetComboBox.addItem(StationInformationMenuItem.SIMULATION_LABEL + ": " + s.getName());                    }                }                if (data.getOtherUsersStations() != null) {                    for (OtherUserStations ous : data.getOtherUsersStations()) {                        if (ous.getUser() != null) {                            selectDatasetComboBox.addItem(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL + " " + ous.getUser().getOrganizationName());                        }                    }                }            }            if (initiallySelectedDataset != null) {                if (initiallySelectedDataset.startsWith(StationInformationMenuItem.OWN_ACTIVE_STATIONS_LABEL)) {                    selectDatasetComboBox.setSelectedItem(StationInformationMenuItem.OWN_ACTIVE_STATIONS_LABEL);                } else if (initiallySelectedDataset.startsWith(StationInformationMenuItem.SIMULATION_LABEL)) {                                        selectDatasetComboBox.setSelectedItem(initiallySelectedDataset);                } else if (initiallySelectedDataset.startsWith(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL)) {                    selectDatasetComboBox.setSelectedItem(initiallySelectedDataset);                }            }            selectDatasetComboBox.addItemListener(this);						viewContactInformationButton = getButton("View contact information", 180);			viewContactInformationButton.setVisible(false);			viewContactInformationButton.addActionListener(this);                deleteSimulationButton = getButton("Delete selected simulation", 200);                    deleteSimulationButton.setVisible(false);            deleteSimulationButton.addActionListener(this);            newSimulationTextField = getTextField(12);            addNewSimulationButton = getButton("Add new simulation dataset", 200);            addNewSimulationButton.addActionListener(this);                selectStationComboBox = getComboBox(null);            updateSelectStationComboBox(0);            selectStationComboBox.addItemListener(this);            addStationButton = getButton("Add new station", 140);            addStationButton.addActionListener(this);                        stationNameTextField = getTextField(16);            stationNameTextField.getDocument().addDocumentListener(this);            stationTypeComboBox = getComboBox(new String[] {"AIS Base Station", "AIS Repeater", "AIS Receiver station", "AIS AtoN station"});            stationTypeComboBox.addItemListener(this);            latitudeTextField = getTextField(16);          			latitudeTextField.setToolTipText("Positive values are in northern hemisphere while negative values are in southern hemisphere");				            latitudeTextField.getDocument().addDocumentListener(this);            longitudeTextField = getTextField(16);			longitudeTextField.setToolTipText("Positive values are east of Greenwich while negative values are west of Greenwich");            longitudeTextField.getDocument().addDocumentListener(this);            mmsiNumberTextField = getTextField(16);            mmsiNumberTextField.getDocument().addDocumentListener(this);            transmissionPowerTextField = getTextField(16);                        transmissionPowerTextField.getDocument().addDocumentListener(this);                antennaTypeComboBox = getComboBox(new String[] {"No antenna", "Omnidirectional", "Directional"});                                 antennaTypeComboBox.addItemListener(this);            antennaHeightTextField = getTextField(16);                       antennaHeightTextField.getDocument().addDocumentListener(this);            terrainHeightTextField = getTextField(16);            terrainHeightTextField.getDocument().addDocumentListener(this);            headingTextField = getTextField(16);            headingTextField.getDocument().addDocumentListener(this);            fieldOfViewAngleTextField = getTextField(16);                       fieldOfViewAngleTextField.getDocument().addDocumentListener(this);            gainTextField = getTextField(16);            gainTextField.getDocument().addDocumentListener(this);            			channelAComboBox = getComboBox(new String[] {"NULL", "AIS1", "AIS2"});			channelAComboBox.addItemListener(this);			channelBComboBox = getComboBox(new String[] {"NULL", "AIS1", "AIS2"});			channelBComboBox.addItemListener(this);						chooseDefaultFATDMASchemeButton = getButton("Choose IALA default FATDMA scheme", 250);			chooseDefaultFATDMASchemeButton.addActionListener(this);			selectIALADefaultFATDMASchemeComboBox = getComboBox(new String[] {"1-I", "1-II", "2-I", "2-II",				"3-I", "3-II", "4-I", "4-II", "5-I", "5-II", "6-I", "6-II", "7-I", "7-II", "8-I", "8-II",				"9-I", "9-II", "10-I", "10-II", "11-I", "11-II", "12-I", "12-II", "13-I", "13-II", "14-I", "14-II", 				"15-I", "15-II", "16-I", "16-II", "17-I", "17-II", "18-I", "18-II", "19-I", "19-II", "20-I", "20-II", 				"21-I", "21-II", "22-I", "22-II", "23-I", "23-II", "24-I", "24-II", "25-I", "25-II", "26-I", "26-II",				"27-I", "27-II", "28-I", "28-II", "29-I", "29-II", "30-I", "30-II", "31-I", "31-II", "32-I", "32-II",				"33-I", "33-II", "34-I", "34-II", "35-I", "35-II", "36-I", "36-II"});			selectIALADefaultFATDMASchemeComboBox.addItemListener(this);			semaphoreModeRadioButton = new JRadioButton("Semaphore mode");			semaphoreModeRadioButton.addItemListener(this);			nonSemaphoreModeRadioButton = new JRadioButton("Non-semaphore mode");				nonSemaphoreModeRadioButton.setSelected(true);			nonSemaphoreModeRadioButton.addItemListener(this);			ButtonGroup group = new ButtonGroup();			group.add(semaphoreModeRadioButton);			group.add(nonSemaphoreModeRadioButton);			baseStationReportInCheckBox = new JCheckBox("Base Station Report in:");			baseStationReportInCheckBox.setSelected(true);			baseStationReportInCheckBox.addItemListener(this);			fatdmaReservationOnChACheckBox = new JCheckBox("FATDMA reservation on CH A");			fatdmaReservationOnChACheckBox.setSelected(true);			fatdmaReservationOnChACheckBox.addItemListener(this);			fatdmaReservationOnChBCheckBox = new JCheckBox("FATDMA reservation on CH B");			fatdmaReservationOnChBCheckBox.setSelected(true);			fatdmaReservationOnChBCheckBox.addItemListener(this);			oneAdditionalTimeslotOnChACheckBox = new JCheckBox("One additional timeslot on CH A");			oneAdditionalTimeslotOnChACheckBox.addItemListener(this);			oneAdditionalTimeslotOnChBCheckBox = new JCheckBox("One additional timeslot on CH B");			oneAdditionalTimeslotOnChBCheckBox.addItemListener(this);			additionalBlocksForChAComboBox = getComboBox(new String[] {"0", "1", "2"});			additionalBlocksForChAComboBox.addItemListener(this);			additionalBlocksForChBComboBox = getComboBox(new String[] {"0", "1", "2"});			additionalBlocksForChBComboBox.addItemListener(this);			additionalTimeslotsForChAComboBox = getComboBox(new String[] {"1", "2", "3"});			additionalTimeslotsForChAComboBox.addItemListener(this);			additionalTimeslotsForChBComboBox = getComboBox(new String[] {"1", "2", "3"});			additionalTimeslotsForChBComboBox.addItemListener(this);			chATimeslotsReservedTextField = getTextField(4);			chATimeslotsReservedTextField.setEditable(false);			chBTimeslotsReservedTextField = getTextField(4);			chBTimeslotsReservedTextField.setEditable(false);			chATimeslotsReservedLabel = new JLabel();			chBTimeslotsReservedLabel = new JLabel();						okDefaultFATDMASchemeButton = getButton("Ok", 100);			okDefaultFATDMASchemeButton.addActionListener(this);			cancelDefaultFATDMASchemeButton = getButton("Cancel", 100);			cancelDefaultFATDMASchemeButton.addActionListener(this);						            additionalInformationJTextArea = getTextArea("");            additionalInformationJTextArea.getDocument().addDocumentListener(this);                            exitButton = getButton("Exit", 80);                        exitButton.addActionListener(this);			addPlannedButton = getButton("Add planned status", 150);			addPlannedButton.addActionListener(this);            makeOperativeButton = getButton("Make operative", 140);                makeOperativeButton.addActionListener(this);			            saveButton = getButton("Save", 80);                saveButton.addActionListener(this);                         deleteButton = getButton("Delete", 100);              deleteButton.addActionListener(this);            acceptProposalButton = getButton("Accept proposal", 120);                                                  acceptProposalButton.addActionListener(this);            proposeChangesButton = getButton("Propose changes", 140);            proposeChangesButton.addActionListener(this);                tabbedPane = new JTabbedPane();                          if (data != null) {                if (initiallySelectedDataset == null) {                    if (data.getActiveStations() != null && !data.getActiveStations().isEmpty()) {                        ActiveStation as = data.getActiveStations().get(0);                        initializeTabbedPane(as);                    } else {                        tabbedPane.removeAll();                    }                } else if (initiallySelectedDataset.startsWith(StationInformationMenuItem.OWN_ACTIVE_STATIONS_LABEL)) {                    if (data.getActiveStations() != null && !data.getActiveStations().isEmpty()) {                        if (initiallySelectedStationName != null) {                            boolean initialized = false;                            for (ActiveStation as : data.getActiveStations()) {                                List<AISFixedStationData> stations = as.getStations();                                if (stations != null) {                                    for (AISFixedStationData stationData : stations) {                                        if (stationData.getStationName().equals(initiallySelectedStationName)) {                                            initializeTabbedPane(as);                                            initialized = true;                                            break;                                        }                                    }                                }                            }                            if (!initialized) {                                                               ActiveStation as = data.getActiveStations().get(0);                                initializeTabbedPane(as);                            }                        }                    } else {                        tabbedPane.removeAll();                    }                      ignoreListeners = true;                    int i = initiallySelectedDataset.lastIndexOf("/");                    if (initiallySelectedDataset.substring(i+1).equals(StationInformationMenuItem.OPERATIVE_LABEL)) {                        if (tabbedPane.getTabCount() >= 1) {                            tabbedPane.setSelectedIndex(0);                        }                                            } else if (initiallySelectedDataset.substring(i+1).equals(StationInformationMenuItem.PLANNED_LABEL)) {                        if (tabbedPane.getTabCount() >= 2) {                            tabbedPane.setSelectedIndex(1);                        }                                        }                    ignoreListeners = false;                } else if (initiallySelectedDataset.startsWith(StationInformationMenuItem.SIMULATION_LABEL)) {                    String temp = StationInformationMenuItem.SIMULATION_LABEL + ": ";                    String simulationName = initiallySelectedDataset.substring(temp.length());                                       if (data.getSimulatedStations() != null && !data.getSimulatedStations().isEmpty()) {                        for (Simulation s : data.getSimulatedStations()) {                            if (s.getName().equals(simulationName)) {                                List<AISFixedStationData> stations = s.getStations();                                if (stations != null) {                                    for (AISFixedStationData stationData : stations) {                                        if (stationData.getStationName().equals(initiallySelectedStationName)) {                                                                                initializeTabbedPane(stationData);                                            break;                                        }                                    }                                }                            }                        }                    }                  } else if (initiallySelectedDataset.startsWith(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL)) {                    String temp = StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL + " ";                                                            String organizationName = initiallySelectedDataset.substring(temp.length());                                        if (data.getOtherUsersStations() != null && !data.getOtherUsersStations().isEmpty()) {                        for (OtherUserStations ous : data.getOtherUsersStations()) {                            if (ous.getUser().getOrganizationName().equals(organizationName)) {                                if (ous.getStations() != null && !ous.getStations().isEmpty()) {                                      if (initiallySelectedStationName != null) {                                        boolean initialized = false;                                        for (ActiveStation as : ous.getStations()) {                                            List<AISFixedStationData> stations = as.getStations();                                            if (stations != null) {                                                for (AISFixedStationData stationData : stations) {                                                    if (stationData.getStationName().equals(initiallySelectedStationName)) {                                                                                            initializeTabbedPane(as);                                                        initialized = true;                                                        break;                                                    }                                                }                                            }                                        }                                        if (!initialized) {                                            ActiveStation as = data.getActiveStations().get(0);                                            initializeTabbedPane(as);                                        }                                    }                                }                            }                        }                    }                 }                            } else {                tabbedPane.removeAll();            }                        tabbedPane.addChangeListener(this);                if (tabbedPane.getTabCount() == 0) {                tabbedPane.setVisible(false);            } else {            			                updateTabbedPane();            }                        initiallySelectedDataset = null;                        initiallySelectedStationName = null;                        updateDialog();    						} else if (viewContactInformationButton != null && e.getSource() == viewContactInformationButton) {			if (data != null && data.getOtherUsersStations() != null) {                				for (OtherUserStations ous : data.getOtherUsersStations()) {					if (((String) selectDatasetComboBox.getSelectedItem()).endsWith(ous.getUser().getOrganizationName())) {						JDialog contactInformationDialog = new ContactInformationDialog(this, ous.getUser());									Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();						contactInformationDialog.setBounds((int) screenSize.getWidth()/2 - ContactInformationDialog.WINDOW_WIDTH/2,							(int) screenSize.getHeight()/2 - ContactInformationDialog.WINDOW_HEIGHT/2, ContactInformationDialog.WINDOW_WIDTH,							ContactInformationDialog.WINDOW_HEIGHT);						contactInformationDialog.setVisible(true);						break;					}				}			}				        } else if (deleteSimulationButton != null && e.getSource() == deleteSimulationButton) {            int response = JOptionPane.showConfirmDialog(dialog, "Are you sure you want to delete the current simulation?", "Confirm action", JOptionPane.YES_NO_OPTION);            if (response == JOptionPane.YES_OPTION) {                ignoreListeners = true;                                String selectedItem = (String) selectDatasetComboBox.getSelectedItem();                String temp = StationInformationMenuItem.SIMULATION_LABEL + ": ";                String selectedSimulation = selectedItem.substring(temp.length());                deleteSimulation(selectedSimulation);                selectDatasetComboBox.removeItem(selectedItem);                selectDatasetComboBox.setSelectedItem(0);                updateSelectStationComboBox(0);                if (selectStationComboBox.getItemCount() <= 0) {                    selectStationComboBox.setVisible(false);                    tabbedPane.setVisible(false);                                    } else {                    selectStationComboBox.setVisible(true);                    tabbedPane.setVisible(true);                    updateTabbedPane();                }                if (data == null || data.getSimulatedStations() == null || data.getSimulatedStations().isEmpty()) {                    deleteSimulationButton.setVisible(false);                }                ignoreListeners = false;                //eavdamMenu.rebuildShowOnMapMenu();            } else if (response == JOptionPane.NO_OPTION) {                                        // do nothing            }         } else if (addNewSimulationButton != null && e.getSource() == addNewSimulationButton) {            if (newSimulationTextField.getText().trim().isEmpty()) {                JOptionPane.showMessageDialog(dialog, "No name given for the simulation!");            } else {                String simulationName = newSimulationTextField.getText().trim();                                boolean success = addSimulation(simulationName);                if (success) {                    newSimulationTextField.setText("");                    selectDatasetComboBox.addItem(StationInformationMenuItem.SIMULATION_LABEL + ": " + simulationName);                    selectDatasetComboBox.setSelectedItem(StationInformationMenuItem.SIMULATION_LABEL + ": " + simulationName);                    deleteSimulationButton.setEnabled(true);                    updateSelectStationComboBox(0);                    if (selectStationComboBox.getItemCount() <= 0) {                        selectStationComboBox.setVisible(false);                        tabbedPane.setVisible(false);                                        } else {                        updateTabbedPane();                    }                    //eavdamMenu.rebuildShowOnMapMenu();                    addStationButton.setVisible(true);                         }            }        } else if (addStationButton != null && e.getSource() == addStationButton) {            if (selectDatasetComboBox.getSelectedIndex() == 0 && tabbedPane != null && tabbedPane.isVisible() &&                    tabbedPane.getSelectedIndex() >= 0 && tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL)) {                if (selectStationComboBox != null && isChanged(selectStationComboBox.getSelectedIndex())) {                    int response = JOptionPane.showConfirmDialog(dialog,                        "Do you want to save the changes made to the current planned station?",                        "Confirm action", JOptionPane.YES_NO_CANCEL_OPTION);                    if (response == JOptionPane.YES_OPTION) {                        boolean success = saveStation(selectStationComboBox.getSelectedIndex());                        if (success) {                            saveButton.setEnabled(false);                            updateTabbedPane();                        }                    } else if (response == JOptionPane.NO_OPTION) {                                                updateTabbedPane();                    } else if (response == JOptionPane.CANCEL_OPTION) {                        // do nothing                    }                                    }            }                        addStationDialog = new AddStationDialog(this);			     		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();            addStationDialog.setBounds((int) screenSize.getWidth()/2 - AddStationDialog.WINDOW_WIDTH/2,				(int) screenSize.getHeight()/2 - AddStationDialog.WINDOW_HEIGHT/2, AddStationDialog.WINDOW_WIDTH,				AddStationDialog.WINDOW_HEIGHT);            addStationDialog.setVisible(true);					} else if (addPlannedButton != null && e.getSource() == addPlannedButton) {					ignoreListeners = true;            int selectedStationIndex = selectStationComboBox.getSelectedIndex();                            			turnOperativeIntoPlannedStation(selectedStationIndex);                                                            			ActiveStation as = data.getActiveStations().get(selectedStationIndex);			initializeTabbedPane(as);			tabbedPane.setSelectedIndex(tabbedPane.getTabCount()-1);            updateTabbedPane(); 	            eavdamMenu.getStationLayer().updateStations();            ignoreListeners = false;           } else if (makeOperativeButton != null && e.getSource() == makeOperativeButton) {            if (saveButton.isEnabled()) {                JOptionPane.showMessageDialog(dialog, "The planned changes must be saved first!");            } else {                int response = JOptionPane.showConfirmDialog(dialog, "Are you sure you want to turn the planned station into the operative station?", "Confirm action", JOptionPane.YES_NO_OPTION);                if (response == JOptionPane.YES_OPTION) {                    ignoreListeners = true;                    int selectedStationIndex = selectStationComboBox.getSelectedIndex();                            					turnPlannedIntoOperativeStation(selectedStationIndex);                                    updateSelectStationComboBox(selectedStationIndex);					ActiveStation as = data.getActiveStations().get(selectedStationIndex);					initializeTabbedPane(as);					tabbedPane.setSelectedIndex(tabbedPane.getTabCount()-1);                    updateTabbedPane();                     eavdamMenu.getStationLayer().updateStations();                    ignoreListeners = false;                                } else if (response == JOptionPane.NO_OPTION) {                                            // do nothing                }            }                    } else if (proposeChangesButton != null && e.getSource() == proposeChangesButton) {            ignoreListeners = true;                     int selectedIndex = selectStationComboBox.getSelectedIndex();              if (data != null && data.getOtherUsersStations() != null) {                                for (OtherUserStations ous : data.getOtherUsersStations()) {                    if (((String) selectDatasetComboBox.getSelectedItem()).endsWith(ous.getUser().getOrganizationName())) {                        List<ActiveStation> stations = ous.getStations();                        if (stations != null && selectedIndex < stations.size()) {                            ActiveStation as = stations.get(selectedIndex);                                 addProposal(selectedIndex, ous.getUser().getOrganizationName());                            initializeTabbedPane(as);                            tabbedPane.setSelectedIndex(tabbedPane.getTabCount()-1);                            updateTabbedPane();                                    }                    }                }            }                        } else if (saveButton != null && e.getSource() == saveButton) {                        ignoreListeners = true;                     if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_TO_LABEL)) {                int selectedIndex = selectStationComboBox.getSelectedIndex();                         boolean success = saveStation(selectedIndex);                if (success) {                                   saveButton.setEnabled(false);                }                                    } else {                int selectedIndex = selectStationComboBox.getSelectedIndex();                         boolean success = saveStation(selectedIndex);                if (success) {                    updateSelectStationComboBox(selectedIndex);                                                                  saveButton.setEnabled(false);                    eavdamMenu.getStationLayer().updateStations();                }                        }            ignoreListeners = false;                    } else if ((deleteButton != null && e.getSource() == deleteButton)) {            if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_FROM_LABEL)) {                int response = JOptionPane.showConfirmDialog(dialog, "Are you sure you want to delete the proposal?", "Confirm action", JOptionPane.YES_NO_OPTION);                if (response == JOptionPane.YES_OPTION) {                    ignoreListeners = true;                    int selectedStationIndex = selectStationComboBox.getSelectedIndex();                    String temp = StationInformationMenuItem.PROPOSAL_FROM_LABEL + " ";                    String organizationName = tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).substring(temp.length());                    deleteProposalFrom(selectedStationIndex, organizationName);                                                if (data.getActiveStations() != null && !data.getActiveStations().isEmpty()) {                        ActiveStation as = data.getActiveStations().get(selectedStationIndex);                                                initializeTabbedPane(as);                    }                    updateTabbedPane();                    ignoreListeners = false;                } else if (response == JOptionPane.NO_OPTION) {                                            // do nothing                }             } else if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_TO_LABEL)) {                int response = JOptionPane.showConfirmDialog(dialog, "Are you sure you want to delete your proposal?", "Confirm action", JOptionPane.YES_NO_OPTION);                if (response == JOptionPane.YES_OPTION) {                    ignoreListeners = true;                    int selectedStationIndex = selectStationComboBox.getSelectedIndex();                     if (data != null && data.getOtherUsersStations() != null) {                                        for (OtherUserStations ous : data.getOtherUsersStations()) {                            if (((String) selectDatasetComboBox.getSelectedItem()).endsWith(ous.getUser().getOrganizationName())) {                                List<ActiveStation> stations = ous.getStations();                                if (stations != null && selectedStationIndex < stations.size()) {                                    ActiveStation as = stations.get(selectedStationIndex);                                                                             deleteProposalTo(selectedStationIndex, ous.getUser().getOrganizationName());                                    initializeTabbedPane(as);                                                                updateTabbedPane();                                            }                            }                        }                    }                    ignoreListeners = false;                } else if (response == JOptionPane.NO_OPTION) {                                            // do nothing                }                                     } else {				if (tabbedPane.getTabCount() <= 1 ||						!tabbedPane.getTitleAt(1).equals(StationInformationMenuItem.PLANNED_LABEL)) {  // only operative or planned status exists					int response = JOptionPane.showConfirmDialog(dialog, "Are you sure you want to delete the station?", "Confirm action", JOptionPane.YES_NO_OPTION);					if (response == JOptionPane.YES_OPTION) {						ignoreListeners = true;						int selectedStationIndex = selectStationComboBox.getSelectedIndex();						deleteStation(selectedStationIndex);						selectStationComboBox.removeItemAt(selectedStationIndex);						updateSelectStationComboBox(0);						if (selectStationComboBox.getItemCount() <= 0) {							selectStationComboBox.setVisible(false);							tabbedPane.setVisible(false);                    						} else {							ActiveStation as = data.getActiveStations().get(0);         							initializeTabbedPane(as);												updateTabbedPane();						}						eavdamMenu.getStationLayer().updateStations();						ignoreListeners = false;					} else if (response == JOptionPane.NO_OPTION) {                        						// do nothing					}				} else if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL)) {					int response = JOptionPane.showConfirmDialog(dialog, "Are you sure you want to delete the operative status of this station?", "Confirm action", JOptionPane.YES_NO_OPTION);					if (response == JOptionPane.YES_OPTION) {						ignoreListeners = true;						int selectedStationIndex = selectStationComboBox.getSelectedIndex();						deleteOperativeStation(selectedStationIndex);						updateSelectStationComboBox(selectedStationIndex);						ActiveStation as = data.getActiveStations().get(selectedStationIndex);                                              						initializeTabbedPane(as);												updateTabbedPane();												eavdamMenu.getStationLayer().updateStations();						ignoreListeners = false;					} else if (response == JOptionPane.NO_OPTION) {                        						// do nothing					}								} else if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL)) {					int response = JOptionPane.showConfirmDialog(dialog, "Are you sure you want to delete the planned status of this station?", "Confirm action", JOptionPane.YES_NO_OPTION);					if (response == JOptionPane.YES_OPTION) {						ignoreListeners = true;						int selectedStationIndex = selectStationComboBox.getSelectedIndex();						deletePlannedStation(selectedStationIndex);						ActiveStation as = data.getActiveStations().get(selectedStationIndex);                                         						initializeTabbedPane(as);							updateSelectStationComboBox(selectedStationIndex);						updateTabbedPane();												eavdamMenu.getStationLayer().updateStations();						ignoreListeners = false;					} else if (response == JOptionPane.NO_OPTION) {                        						// do nothing					}									}			            }        } else if (exitButton != null && e.getSource() == exitButton) {            int response = JOptionPane.showConfirmDialog(dialog,                "Are you sure you want to exit editing the stations?",                "Confirm action", JOptionPane.YES_NO_OPTION);            if (response == JOptionPane.YES_OPTION) {                dialog.dispose();            } else if (response == JOptionPane.NO_OPTION) {                                        // do nothing            }     		} else if (chooseDefaultFATDMASchemeButton != null && e.getSource() == chooseDefaultFATDMASchemeButton) {				    chooseDefaultFATDMASchemeDialog = new JDialog(getEavdamMenu().getOpenMapFrame(), "Choose IALA default FATDMA scheme", true);						// defaults			baseStationReportInCheckBox.setSelected(true);			semaphoreModeRadioButton.setSelected(false);			nonSemaphoreModeRadioButton.setSelected(true);			fatdmaReservationOnChACheckBox.setSelected(true);			fatdmaReservationOnChBCheckBox.setSelected(true);						oneAdditionalTimeslotOnChACheckBox.setSelected(false);			oneAdditionalTimeslotOnChBCheckBox.setSelected(false);			additionalBlocksForChAComboBox.setSelectedIndex(0);			additionalBlocksForChBComboBox.setSelectedIndex(0);			additionalTimeslotsForChAComboBox.setSelectedIndex(0);			additionalTimeslotsForChBComboBox.setSelectedIndex(0);										JPanel panel = new JPanel();			panel.setLayout(new GridBagLayout());			GridBagConstraints c = new GridBagConstraints();			c = updateGBC(c, 0, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));			panel.add(new JLabel("Select from IALA default FATDMA scheme:"), c);			if (!latitudeTextField.getText().trim().isEmpty() && !longitudeTextField.getText().trim().isEmpty()) {				int cellNumber = getCellNumber();				if (cellNumber != -1) {					selectIALADefaultFATDMASchemeComboBox.setSelectedItem(String.valueOf(cellNumber) + "-I");				}			}			c = updateGBC(c, 1, 0, 1, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));               			panel.add(selectIALADefaultFATDMASchemeComboBox, c);				/*				c = updateGBC(c, 0, 1, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));			c.gridwidth = 2;			panel.add(new JLabel("Reserve timeslots for transmission of:"), c);			    */												c = updateGBC(c, 0, 2, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));			c.gridwidth = 1;					panel.add(baseStationReportInCheckBox, c);			c = updateGBC(c, 1, 2, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,0,5));						panel.add(semaphoreModeRadioButton, c);			c = updateGBC(c, 1, 3, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));						panel.add(nonSemaphoreModeRadioButton, c);			c = updateGBC(c, 0, 4, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));						panel.add(fatdmaReservationOnChACheckBox, c);			c = updateGBC(c, 1, 4, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));						panel.add(fatdmaReservationOnChBCheckBox, c);			c = updateGBC(c, 0, 5, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));						panel.add(oneAdditionalTimeslotOnChACheckBox, c);			c = updateGBC(c, 1, 5, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));						panel.add(oneAdditionalTimeslotOnChBCheckBox, c);						JPanel temp1 = new JPanel(new GridBagLayout());			c.gridwidth = 1;						c = updateGBC(c, 0, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));						temp1.add(additionalBlocksForChAComboBox, c);			c = updateGBC(c, 1, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));			temp1.add(new JLabel("Additional blocks of"), c);			c = updateGBC(c, 0, 6, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(0,0,0,0));			panel.add(temp1, c);			JPanel temp2 = new JPanel(new GridBagLayout());			c.gridwidth = 1;						c = updateGBC(c, 0, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));						temp2.add(additionalBlocksForChBComboBox, c);			c = updateGBC(c, 1, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));			temp2.add(new JLabel("Additional blocks of"), c);			c = updateGBC(c, 1, 6, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(0,0,0,0));			panel.add(temp2, c);									JPanel temp3 = new JPanel(new GridBagLayout());			c.gridwidth = 1;						c = updateGBC(c, 0, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));						temp3.add(additionalTimeslotsForChAComboBox, c);			c = updateGBC(c, 1, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));			temp3.add(new JLabel("timeslots on CH A"), c);			c = updateGBC(c, 0, 7, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(0,0,0,0));			panel.add(temp3, c);			JPanel temp4 = new JPanel(new GridBagLayout());			c.gridwidth = 1;						c = updateGBC(c, 0, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));						temp4.add(additionalTimeslotsForChBComboBox, c);			c = updateGBC(c, 1, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));			temp4.add(new JLabel("timeslots on CH B"), c);			c = updateGBC(c, 1, 7, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(0,0,0,0));			panel.add(temp4, c);						c = updateGBC(c, 0, 8, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));			c.gridwidth = 2;			panel.add(new JLabel("Total timeslots reserved:"), c);										JPanel temp5 = new JPanel(new GridBagLayout());			c.gridwidth = 1;						c = updateGBC(c, 0, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));						temp5.add(new JLabel("CH A:"), c);			c = updateGBC(c, 1, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));			temp5.add(chATimeslotsReservedTextField, c);			c = updateGBC(c, 0, 9, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(0,0,0,0));			panel.add(temp5, c);			JPanel temp6 = new JPanel(new GridBagLayout());			c = updateGBC(c, 0, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));						temp6.add(new JLabel("CH B:"), c);						c = updateGBC(c, 1, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));			temp6.add(chBTimeslotsReservedTextField, c);			c = updateGBC(c, 1, 9, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(0,0,0,0));			panel.add(temp6, c);						JPanel temp7 = new JPanel(new GridBagLayout());			c = updateGBC(c, 0, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));						temp7.add(new JLabel("CH A:   "), c);						c = updateGBC(c, 1, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));			temp7.add(chATimeslotsReservedLabel, c);			c = updateGBC(c, 0, 10, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(0,0,0,0));			c.gridwidth = 2;						panel.add(temp7, c);									JPanel temp8 = new JPanel(new GridBagLayout());			c = updateGBC(c, 0, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));						c.gridwidth = 1;			temp8.add(new JLabel("CH B:   "), c);						c = updateGBC(c, 1, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));			temp8.add(chBTimeslotsReservedLabel, c);			c = updateGBC(c, 0, 11, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(0,0,0,0));			c.gridwidth = 2;			panel.add(temp8, c);						JPanel buttonPanel = new JPanel(new GridBagLayout());            			c = updateGBC(c, 0, 0, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5)); 			c.gridwidth = 1;                 buttonPanel.add(okDefaultFATDMASchemeButton, c);			c = updateGBC(c, 1, 0, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5)); 			buttonPanel.add(cancelDefaultFATDMASchemeButton, c);						c = updateGBC(c, 0, 12, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));			c.gridwidth = 2;			panel.add(buttonPanel, c);								JScrollPane scrollPane = new JScrollPane(panel);			scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);			scrollPane.setPreferredSize(new Dimension(540, 440));			scrollPane.setMaximumSize(new Dimension(540, 440));			chooseDefaultFATDMASchemeDialog.getContentPane().add(scrollPane);									updateTimeslotsReservedTextFields();			     		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();            chooseDefaultFATDMASchemeDialog.setBounds((int) screenSize.getWidth()/2 - 540/2, (int) screenSize.getHeight()/2 - 440/2, 540, 440);            chooseDefaultFATDMASchemeDialog.setVisible(true);					} else if (okDefaultFATDMASchemeButton != null && e.getSource() == okDefaultFATDMASchemeButton) {			ignoreListeners = true;			Map<String,List<FATDMACell>> fatdmaCellsMap = DefaultFATDMAReader.readDefaultValues(null, null);			List<FATDMACell> fatdmaCells = fatdmaCellsMap.get((String) selectIALADefaultFATDMASchemeComboBox.getSelectedItem());			List<Component> initialChannelAComponents = new ArrayList<Component>();							List<Component> initialChannelBComponents = new ArrayList<Component>();				if (fatdmaCells.size() == 3) {								if (baseStationReportInCheckBox.isSelected()) {								FATDMACell baseStationFATDMACell = fatdmaCells.get(0);					FATDMADefaultChannel baseStationChannelA = baseStationFATDMACell.getChannelA();					FATDMANode channelAFATDMANode = null;					if (semaphoreModeRadioButton.isSelected()) {						channelAFATDMANode = baseStationChannelA.getSemaphoreNode();					} else {						channelAFATDMANode = baseStationChannelA.getNonSemaphoreNode(); 					}					FATDMADefaultChannel baseStationChannelB = baseStationFATDMACell.getChannelB();					FATDMANode channelBFATDMANode = null;					if (semaphoreModeRadioButton.isSelected()) {						channelBFATDMANode = baseStationChannelB.getSemaphoreNode();					} else {						channelBFATDMANode = baseStationChannelB.getNonSemaphoreNode(); 					}					if (stationTypeComboBox.getSelectedIndex() == 0 || stationTypeComboBox.getSelectedIndex() == 1) {  // base station or repeater							initialChannelAComponents.add(new JTextField(channelAFATDMANode.getStartingSlot().toString(), 8));						initialChannelAComponents.add(new JTextField(channelAFATDMANode.getBlockSize().toString(), 8));						initialChannelAComponents.add(new JTextField(channelAFATDMANode.getIncrement().toString(), 8));						Component component = new JComboBox();															((JComboBox) component).addItem("Local");						((JComboBox) component).addItem("Remote");						((JComboBox) component).setBorder(new EmptyBorder(0, 3, 0, 3));						((JComboBox) component).setSelectedItem("Local");												initialChannelAComponents.add(component);						initialChannelAComponents.add(new JTextField(channelAFATDMANode.getUsage(), 8));						Component component2 = new JButton("Clear");							((JButton) component2).setMargin(new Insets(0, 3, 0, 3));						((JButton) component2).addActionListener(this);						initialChannelAComponents.add(component2);												initialChannelBComponents.add(new JTextField(channelBFATDMANode.getStartingSlot().toString(), 8));						initialChannelBComponents.add(new JTextField(channelBFATDMANode.getBlockSize().toString(), 8));						initialChannelBComponents.add(new JTextField(channelBFATDMANode.getIncrement().toString(), 8));						Component component3 = new JComboBox();															((JComboBox) component3).addItem("Local");						((JComboBox) component3).addItem("Remote");						((JComboBox) component3).setBorder(new EmptyBorder(0, 3, 0, 3));						((JComboBox) component3).setSelectedItem("Local");											initialChannelBComponents.add(component3);						initialChannelBComponents.add(new JTextField(channelBFATDMANode.getUsage(), 8));						Component component4 = new JButton("Clear");							((JButton) component4).setMargin(new Insets(0, 3, 0, 3));						((JButton) component4).addActionListener(this);						initialChannelBComponents.add(component4);					} else if (stationTypeComboBox.getSelectedIndex() == 3) {  // aton station						Component component = new JComboBox();															((JComboBox) component).addItem("FATDMA");						((JComboBox) component).addItem("RATDMA");						((JComboBox) component).addItem("CSTDMA");						((JComboBox) component).setBorder(new EmptyBorder(0, 3, 0, 3));						((JComboBox) component).setSelectedItem("FATDMA");							initialChannelAComponents.add(component);								initialChannelAComponents.add(new JTextField("", 8));									initialChannelAComponents.add(new JTextField("", 8));									initialChannelAComponents.add(new JTextField("", 8));						initialChannelAComponents.add(new JTextField(channelAFATDMANode.getStartingSlot().toString(), 8));						initialChannelAComponents.add(new JTextField(channelAFATDMANode.getBlockSize().toString(), 8));						initialChannelAComponents.add(new JTextField(channelAFATDMANode.getIncrement().toString(), 8));						initialChannelAComponents.add(new JTextField(channelAFATDMANode.getUsage(), 8));						Component component2 = new JButton("Clear");							((JButton) component2).setMargin(new Insets(0, 3, 0, 3));						((JButton) component2).addActionListener(this);						initialChannelAComponents.add(component2);								Component component3 = new JComboBox();															((JComboBox) component3).addItem("FATDMA");						((JComboBox) component3).addItem("RATDMA");						((JComboBox) component3).addItem("CSTDMA");						((JComboBox) component3).setBorder(new EmptyBorder(0, 3, 0, 3));						((JComboBox) component3).setSelectedItem("FATDMA");							initialChannelBComponents.add(component3);								initialChannelBComponents.add(new JTextField("", 8));									initialChannelBComponents.add(new JTextField("", 8));									initialChannelBComponents.add(new JTextField("", 8));						initialChannelBComponents.add(new JTextField(channelBFATDMANode.getStartingSlot().toString(), 8));						initialChannelBComponents.add(new JTextField(channelBFATDMANode.getBlockSize().toString(), 8));						initialChannelBComponents.add(new JTextField(channelBFATDMANode.getIncrement().toString(), 8));						initialChannelBComponents.add(new JTextField(channelBFATDMANode.getUsage(), 8));						Component component4 = new JButton("Clear");							((JButton) component4).setMargin(new Insets(0, 3, 0, 3));						((JButton) component4).addActionListener(this);						initialChannelBComponents.add(component4);					}				}				 							FATDMACell datalinkManagementFATDMACell = fatdmaCells.get(1);								FATDMADefaultChannel datalinkManagementChannelA = datalinkManagementFATDMACell.getChannelA();				FATDMADefaultChannel datalinkManagementChannelB = datalinkManagementFATDMACell.getChannelB();				if (stationTypeComboBox.getSelectedIndex() == 0 || stationTypeComboBox.getSelectedIndex() == 1) {  // base station or repeater						if (fatdmaReservationOnChACheckBox.isSelected()) {						initialChannelAComponents.add(new JTextField(datalinkManagementChannelA.getSemaphoreNode().getStartingSlot().toString(), 8));						initialChannelAComponents.add(new JTextField(datalinkManagementChannelA.getSemaphoreNode().getBlockSize().toString(), 8));						if (!oneAdditionalTimeslotOnChACheckBox.isSelected()) {							initialChannelAComponents.add(new JTextField(datalinkManagementChannelA.getSemaphoreNode().getIncrement().toString(), 8));					 	} else {							initialChannelAComponents.add(new JTextField(datalinkManagementChannelA.getNonSemaphoreNode().getIncrement().toString(), 8));						}						Component component = new JComboBox();															((JComboBox) component).addItem("Local");						((JComboBox) component).addItem("Remote");						((JComboBox) component).setBorder(new EmptyBorder(0, 3, 0, 3));						((JComboBox) component).setSelectedItem("Local");												initialChannelAComponents.add(component);						initialChannelAComponents.add(new JTextField(datalinkManagementChannelA.getSemaphoreNode().getUsage(), 8));						Component component2 = new JButton("Clear");							((JButton) component2).setMargin(new Insets(0, 3, 0, 3));						((JButton) component2).addActionListener(this);						initialChannelAComponents.add(component2);					}					if (fatdmaReservationOnChBCheckBox.isSelected()) {											initialChannelBComponents.add(new JTextField(datalinkManagementChannelB.getSemaphoreNode().getStartingSlot().toString(), 8));						initialChannelBComponents.add(new JTextField(datalinkManagementChannelB.getSemaphoreNode().getBlockSize().toString(), 8));						if (!oneAdditionalTimeslotOnChBCheckBox.isSelected()) {							initialChannelBComponents.add(new JTextField(datalinkManagementChannelB.getSemaphoreNode().getIncrement().toString(), 8));					 	} else {							initialChannelBComponents.add(new JTextField(datalinkManagementChannelB.getNonSemaphoreNode().getIncrement().toString(), 8));						}						Component component3 = new JComboBox();															((JComboBox) component3).addItem("Local");						((JComboBox) component3).addItem("Remote");						((JComboBox) component3).setBorder(new EmptyBorder(0, 3, 0, 3));						((JComboBox) component3).setSelectedItem("Local");											initialChannelBComponents.add(component3);						initialChannelBComponents.add(new JTextField(datalinkManagementChannelB.getNonSemaphoreNode().getUsage(), 8));						Component component4 = new JButton("Clear");							((JButton) component4).setMargin(new Insets(0, 3, 0, 3));						((JButton) component4).addActionListener(this);						initialChannelBComponents.add(component4);					}				} else if (stationTypeComboBox.getSelectedIndex() == 3) {  // aton station					if (fatdmaReservationOnChACheckBox.isSelected()) {						Component component = new JComboBox();															((JComboBox) component).addItem("FATDMA");						((JComboBox) component).addItem("RATDMA");						((JComboBox) component).addItem("CSTDMA");						((JComboBox) component).setBorder(new EmptyBorder(0, 3, 0, 3));						((JComboBox) component).setSelectedItem("FATDMA");							initialChannelAComponents.add(component);								initialChannelAComponents.add(new JTextField("", 8));									initialChannelAComponents.add(new JTextField("", 8));									initialChannelAComponents.add(new JTextField("", 8));						initialChannelAComponents.add(new JTextField(datalinkManagementChannelA.getSemaphoreNode().getStartingSlot().toString(), 8));						initialChannelAComponents.add(new JTextField(datalinkManagementChannelA.getSemaphoreNode().getBlockSize().toString(), 8));						if (!oneAdditionalTimeslotOnChACheckBox.isSelected()) {							initialChannelAComponents.add(new JTextField(datalinkManagementChannelA.getSemaphoreNode().getIncrement().toString(), 8));					 	} else {							initialChannelAComponents.add(new JTextField(datalinkManagementChannelA.getNonSemaphoreNode().getIncrement().toString(), 8));						}												initialChannelAComponents.add(new JTextField(datalinkManagementChannelA.getSemaphoreNode().getUsage(), 8));						Component component2 = new JButton("Clear");							((JButton) component2).setMargin(new Insets(0, 3, 0, 3));						((JButton) component2).addActionListener(this);						initialChannelAComponents.add(component2);					}					if (fatdmaReservationOnChBCheckBox.isSelected()) {								Component component3 = new JComboBox();															((JComboBox) component3).addItem("FATDMA");						((JComboBox) component3).addItem("RATDMA");						((JComboBox) component3).addItem("CSTDMA");						((JComboBox) component3).setBorder(new EmptyBorder(0, 3, 0, 3));						((JComboBox) component3).setSelectedItem("FATDMA");							initialChannelBComponents.add(component3);								initialChannelBComponents.add(new JTextField("", 8));									initialChannelBComponents.add(new JTextField("", 8));						initialChannelBComponents.add(new JTextField("", 8));											initialChannelBComponents.add(new JTextField(datalinkManagementChannelB.getSemaphoreNode().getStartingSlot().toString(), 8));						initialChannelBComponents.add(new JTextField(datalinkManagementChannelB.getSemaphoreNode().getBlockSize().toString(), 8));						if (!oneAdditionalTimeslotOnChBCheckBox.isSelected()) {							initialChannelBComponents.add(new JTextField(datalinkManagementChannelB.getSemaphoreNode().getIncrement().toString(), 8));					 	} else {							initialChannelBComponents.add(new JTextField(datalinkManagementChannelB.getNonSemaphoreNode().getIncrement().toString(), 8));						}												initialChannelBComponents.add(new JTextField(datalinkManagementChannelB.getNonSemaphoreNode().getUsage(), 8));						Component component4 = new JButton("Clear");							((JButton) component4).setMargin(new Insets(0, 3, 0, 3));						((JButton) component4).addActionListener(this);						initialChannelBComponents.add(component4);					}				}				FATDMACell generalPurposeFATDMACell = fatdmaCells.get(2);				FATDMADefaultChannel generalPurposeChannelA = generalPurposeFATDMACell.getChannelA();				FATDMADefaultChannel generalPurposeChannelB = generalPurposeFATDMACell.getChannelB();				if (stationTypeComboBox.getSelectedIndex() == 0 || stationTypeComboBox.getSelectedIndex() == 1) {  // base station or repeater					if (Integer.parseInt((String) additionalBlocksForChAComboBox.getSelectedItem()) > 0) {						initialChannelAComponents.add(new JTextField(generalPurposeChannelA.getSemaphoreNode().getStartingSlot().toString(), 8));						initialChannelAComponents.add(new JTextField((String) additionalTimeslotsForChAComboBox.getSelectedItem(), 8));						if (Integer.parseInt((String) additionalBlocksForChAComboBox.getSelectedItem()) == 1) {							initialChannelAComponents.add(new JTextField(generalPurposeChannelA.getSemaphoreNode().getIncrement().toString(), 8));					 	} else if (Integer.parseInt((String) additionalBlocksForChAComboBox.getSelectedItem()) == 2) {							initialChannelAComponents.add(new JTextField(generalPurposeChannelA.getNonSemaphoreNode().getIncrement().toString(), 8));						}						Component component = new JComboBox();															((JComboBox) component).addItem("Local");						((JComboBox) component).addItem("Remote");						((JComboBox) component).setBorder(new EmptyBorder(0, 3, 0, 3));						((JComboBox) component).setSelectedItem("Local");												initialChannelAComponents.add(component);						initialChannelAComponents.add(new JTextField(generalPurposeChannelA.getSemaphoreNode().getUsage(), 8));						Component component2 = new JButton("Clear");							((JButton) component2).setMargin(new Insets(0, 3, 0, 3));						((JButton) component2).addActionListener(this);						initialChannelAComponents.add(component2);					}					if (Integer.parseInt((String) additionalBlocksForChBComboBox.getSelectedItem()) > 0) {						initialChannelBComponents.add(new JTextField(generalPurposeChannelB.getSemaphoreNode().getStartingSlot().toString(), 8));						initialChannelBComponents.add(new JTextField((String) additionalTimeslotsForChBComboBox.getSelectedItem(), 8));						if (Integer.parseInt((String) additionalBlocksForChBComboBox.getSelectedItem()) == 1) {							initialChannelBComponents.add(new JTextField(generalPurposeChannelB.getSemaphoreNode().getIncrement().toString(), 8));					 	} else if (Integer.parseInt((String) additionalBlocksForChBComboBox.getSelectedItem()) == 2) {							initialChannelBComponents.add(new JTextField(generalPurposeChannelB.getNonSemaphoreNode().getIncrement().toString(), 8));						}						Component component3 = new JComboBox();															((JComboBox) component3).addItem("Local");						((JComboBox) component3).addItem("Remote");						((JComboBox) component3).setBorder(new EmptyBorder(0, 3, 0, 3));						((JComboBox) component3).setSelectedItem("Local");											initialChannelBComponents.add(component3);						initialChannelBComponents.add(new JTextField(generalPurposeChannelB.getNonSemaphoreNode().getUsage(), 8));						Component component4 = new JButton("Clear");							((JButton) component4).setMargin(new Insets(0, 3, 0, 3));						((JButton) component4).addActionListener(this);						initialChannelBComponents.add(component4);					}				} else if (stationTypeComboBox.getSelectedIndex() == 3) {  // aton station					if (Integer.parseInt((String) additionalBlocksForChAComboBox.getSelectedItem()) > 0) {						Component component = new JComboBox();							((JComboBox) component).addItem("FATDMA");						((JComboBox) component).addItem("RATDMA");						((JComboBox) component).addItem("CSTDMA");						((JComboBox) component).setBorder(new EmptyBorder(0, 3, 0, 3));						((JComboBox) component).setSelectedItem("FATDMA");							initialChannelAComponents.add(component);								initialChannelAComponents.add(new JTextField("", 8));									initialChannelAComponents.add(new JTextField("", 8));									initialChannelAComponents.add(new JTextField("", 8));						initialChannelAComponents.add(new JTextField(generalPurposeChannelA.getSemaphoreNode().getStartingSlot().toString(), 8));						initialChannelAComponents.add(new JTextField((String) additionalTimeslotsForChAComboBox.getSelectedItem(), 8));						if (Integer.parseInt((String) additionalBlocksForChAComboBox.getSelectedItem()) == 1) {							initialChannelAComponents.add(new JTextField(generalPurposeChannelA.getSemaphoreNode().getIncrement().toString(), 8));					 	} else if (Integer.parseInt((String) additionalBlocksForChAComboBox.getSelectedItem()) == 2) {							initialChannelAComponents.add(new JTextField(generalPurposeChannelA.getNonSemaphoreNode().getIncrement().toString(), 8));						}						initialChannelAComponents.add(new JTextField(generalPurposeChannelA.getSemaphoreNode().getUsage(), 8));						Component component2 = new JButton("Clear");							((JButton) component2).setMargin(new Insets(0, 3, 0, 3));						((JButton) component2).addActionListener(this);						initialChannelAComponents.add(component2);					}					if (Integer.parseInt((String) additionalBlocksForChBComboBox.getSelectedItem()) > 0) {											Component component3 = new JComboBox();															((JComboBox) component3).addItem("FATDMA");						((JComboBox) component3).addItem("RATDMA");						((JComboBox) component3).addItem("CSTDMA");						((JComboBox) component3).setBorder(new EmptyBorder(0, 3, 0, 3));						((JComboBox) component3).setSelectedItem("FATDMA");							initialChannelBComponents.add(component3);								initialChannelBComponents.add(new JTextField("", 8));									initialChannelBComponents.add(new JTextField("", 8));						initialChannelBComponents.add(new JTextField("", 8));							initialChannelBComponents.add(new JTextField(generalPurposeChannelB.getSemaphoreNode().getStartingSlot().toString(), 8));						initialChannelBComponents.add(new JTextField((String) additionalTimeslotsForChBComboBox.getSelectedItem(), 8));						if (Integer.parseInt((String) additionalBlocksForChBComboBox.getSelectedItem()) == 1) {							initialChannelBComponents.add(new JTextField(generalPurposeChannelB.getSemaphoreNode().getIncrement().toString(), 8));					 	} else if (Integer.parseInt((String) additionalBlocksForChBComboBox.getSelectedItem()) == 2) {							initialChannelBComponents.add(new JTextField(generalPurposeChannelB.getNonSemaphoreNode().getIncrement().toString(), 8));						}						initialChannelBComponents.add(new JTextField(generalPurposeChannelB.getNonSemaphoreNode().getUsage(), 8));						Component component4 = new JButton("Clear");							((JButton) component4).setMargin(new Insets(0, 3, 0, 3));						((JButton) component4).addActionListener(this);						initialChannelBComponents.add(component4);					}				}			}						updateChannelComboBoxesAndScrollPanes(initialChannelAComponents, initialChannelBComponents, true, true, true, true, false, false);						ignoreListeners = true;						if ((((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL) &&					(tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) ||					tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL))) ||					tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) ||					tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_FROM_LABEL)) {				for (Component component : channelAPanel.getComponents()) {					if (component instanceof JComboBox) {						configureDisabledComboBox((JComboBox) component);					} else if (component instanceof JTextField) {						((JTextField) component).setEnabled(false);						configureDisabledTextField((JTextField) component);						} else if (component instanceof JButton) {						((JButton) component).setVisible(false);					}				}								for (Component component : channelBPanel.getComponents()) {					if (component instanceof JComboBox) {						configureDisabledComboBox((JComboBox) component);					} else if (component instanceof JTextField) {						((JTextField) component).setEnabled(false);						configureDisabledTextField((JTextField) component);									} else if (component instanceof JButton) {						((JButton) component).setVisible(false);					}				}						}			chooseDefaultFATDMASchemeDialog.dispose();			ignoreListeners = false;							} else if (cancelDefaultFATDMASchemeButton != null && e.getSource() == cancelDefaultFATDMASchemeButton) {			chooseDefaultFATDMASchemeDialog.dispose();			        } else {			if (channelAPanel != null) {				Component[] components = channelAPanel.getComponents();				for (int i=0; i<components.length; i++) {					if (e.getSource() instanceof JButton && e.getSource() == components[i]) {										JButton button = (JButton) e.getSource();						if (button.getText().equals("Add row")) {													updateChannelComboBoxesAndScrollPanes(null, null, false, false, false, false, true, false);												saveButton.setEnabled(true);						} else if (button.getText().equals("Clear")) {							//int response = JOptionPane.showConfirmDialog(dialog, "Are you sure you want to delete the row?", "Confirm action", JOptionPane.YES_NO_OPTION);							//if (response == JOptionPane.YES_OPTION) {								clearChannelRow("A", i);								saveButton.setEnabled(true);							//}						}					}				}			}			if (channelBPanel != null) {				Component[] components = channelBPanel.getComponents();				for (int i=0; i<components.length; i++) {											if (e.getSource() instanceof JButton && e.getSource() == components[i]) {						JButton button = (JButton) e.getSource();						if (button.getText().equals("Add row")) {							updateChannelComboBoxesAndScrollPanes(null, null, false, false, false, false, false, true);								saveButton.setEnabled(true);						} else if (button.getText().equals("Clear")) {							//int response = JOptionPane.showConfirmDialog(dialog, "Are you sure you want to delete the row?", "Confirm action", JOptionPane.YES_NO_OPTION);							//if (response == JOptionPane.YES_OPTION) {															clearChannelRow("B", i);								saveButton.setEnabled(true);							//}						}								}								}			}		}	    }		public void stationAdded(String initiallySelectedStationName) {			ignoreListeners = true;		this.initiallySelectedStationName = initiallySelectedStationName;		updateSelectStationComboBox(0);		initiallySelectedStationName = null;		if (selectStationComboBox.getItemCount() >= 0) {			selectStationComboBox.setVisible(true);		}		int selectedIndex = selectStationComboBox.getSelectedIndex();		if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.OWN_ACTIVE_STATIONS_LABEL)) {			if (data != null && data.getActiveStations() != null && selectedIndex < data.getActiveStations().size()) {				initializeTabbedPane(data.getActiveStations().get(selectedIndex));			}		} else if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.SIMULATION_LABEL)) {			if (data != null && data.getSimulatedStations() != null) {                				for (Simulation s : data.getSimulatedStations()) {					if (((String) selectDatasetComboBox.getSelectedItem()).endsWith(s.getName())) {						List<AISFixedStationData> stations = s.getStations();						if (stations != null && selectedIndex < stations.size()) {							initializeTabbedPane(stations.get(selectedIndex));						}					}				}			}            		} else if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL)) {    			if (data != null && data.getOtherUsersStations() != null) {                				for (OtherUserStations ous : data.getOtherUsersStations()) {					if (((String) selectDatasetComboBox.getSelectedItem()).endsWith(ous.getUser().getOrganizationName())) {						List<ActiveStation> stations = ous.getStations();						if (stations != null && selectedIndex < stations.size()) {							initializeTabbedPane(stations.get(selectedIndex));						}					}				}			}		}              		if (tabbedPane.getTabCount() > 0) {			tabbedPane.setVisible(true);		}		updateTabbedPane();		ignoreListeners = false;		addStationDialog.dispose();		eavdamMenu.getStationLayer().updateStations();		updateDialog();		}		public JComboBox getSelectDatasetComboBox() {		return selectDatasetComboBox;	}		public EAVDAMData getData() {		return data;	}		public void setData(EAVDAMData data) {		this.data = data;	}	    private void updateDialog() {          		/*		          if (dialog != null) {            dialog.dispose();        }		*/		boolean dialogWasNull = false;		if (dialog == null) {			dialog = new JDialog(eavdamMenu.getOpenMapFrame(), "Edit Station Information", false);  // true for modal dialog			dialog.addWindowListener(this);			dialogWasNull = true;		}		        JPanel panel = new JPanel();        //panel.setLayout(new GridBagLayout());                  		panel.setLayout(new BorderLayout());				JPanel panel2 = new JPanel();		panel2.setLayout(new BorderLayout());        JPanel p1 = new JPanel(new GridBagLayout());        p1.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5), BorderFactory.createTitledBorder("Select dataset")));                GridBagConstraints c = new GridBagConstraints();        c = updateGBC(c, 0, 0, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));        p1.add(selectDatasetComboBox, c);        c = updateGBC(c, 1, 0, 1, GridBagConstraints.LINE_START, GridBagConstraints.NONE,new Insets(5,5,5,5));        p1.add(viewContactInformationButton, c);		        c = updateGBC(c, 2, 0, 0.0, GridBagConstraints.LINE_END, GridBagConstraints.NONE,new Insets(5,5,5,5));        p1.add(deleteSimulationButton, c);        c = updateGBC(c, 3, 0, 0.0, GridBagConstraints.LINE_END, GridBagConstraints.NONE,new Insets(5,5,5,5));        p1.add(newSimulationTextField, c);        c = updateGBC(c, 4, 0, 0.0, GridBagConstraints.LINE_END, GridBagConstraints.NONE,new Insets(5,5,5,5));        p1.add(addNewSimulationButton, c);                c = updateGBC(c, 0, 0, 0.5, GridBagConstraints.FIRST_LINE_START, GridBagConstraints.HORIZONTAL, new Insets(5,5,5,5));        //panel.add(p1, c);                                                             		panel.add(p1, BorderLayout.NORTH);                selectStationPanel = new JPanel(new GridBagLayout());        selectStationPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5), BorderFactory.createTitledBorder("Select station")));                       c = updateGBC(c, 0, 0, 0.5, GridBagConstraints.FIRST_LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                selectStationPanel.add(selectStationComboBox, c);        c = updateGBC(c, 1, 0, 0.5, GridBagConstraints.FIRST_LINE_END, GridBagConstraints.NONE, new Insets(5,5,5,5));        selectStationPanel.add(addStationButton, c);        if (selectStationComboBox.getItemCount() <= 0) {            selectStationComboBox.setVisible(false);        }        c = updateGBC(c, 0, 1, 0.5, GridBagConstraints.FIRST_LINE_START, GridBagConstraints.HORIZONTAL, new Insets(5,5,5,5));        //panel.add(selectStationPanel, c);                                   		panel.add(selectStationPanel, BorderLayout.CENTER);                c = updateGBC(c, 0, 2, 0.5, GridBagConstraints.FIRST_LINE_START, GridBagConstraints.HORIZONTAL, new Insets(5,5,5,5));        //panel.add(tabbedPane, c);		panel2.add(panel, BorderLayout.NORTH);		tabbedPane.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));		panel2.add(tabbedPane, BorderLayout.CENTER);		/*        JPanel contentPanel = new JPanel();        contentPanel.add(panel, BorderLayout.NORTH);		*/		/*		JScrollPane scrollPane = new JScrollPane(contentPanel);        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);        scrollPane.setPreferredSize(new Dimension(WINDOW_WIDTH, WINDOW_HEIGHT));        scrollPane.setMaximumSize(new Dimension(WINDOW_WIDTH, WINDOW_HEIGHT));		*/		        //dialog.getContentPane().add(scrollPane);					if (dialogWasNull) {			dialog.getContentPane().add(panel2);			Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();			dialog.setBounds((int) screenSize.getWidth()/2 - WINDOW_WIDTH/2,				(int) screenSize.getHeight()/2 - WINDOW_HEIGHT/2, WINDOW_WIDTH, WINDOW_HEIGHT);			dialog.setVisible(true);            		} else {			dialog.setContentPane(panel2);			dialog.validate();		}				    }        private void initializeTabbedPane(ActiveStation as) {        ignoreListeners = true;        tabbedPane.removeAll();        if (as.getStations() != null && !as.getStations().isEmpty()) {            List<AISFixedStationData> stations = as.getStations();            boolean operativeFound = false;            boolean plannedFound = false;            for (AISFixedStationData station : stations) {                if (station.getStatus().getStatusID() == DerbyDBInterface.STATUS_ACTIVE) {                    operativeFound = true;                } else if (station.getStatus().getStatusID() == DerbyDBInterface.STATUS_PLANNED) {                    plannedFound = true;				}            }                                    if (operativeFound) {                tabbedPane.addTab(StationInformationMenuItem.OPERATIVE_LABEL, null, new JPanel(), StationInformationMenuItem.OPERATIVE_LABEL);            }            if (plannedFound) {                tabbedPane.addTab(StationInformationMenuItem.PLANNED_LABEL, null, new JPanel(), StationInformationMenuItem.PLANNED_LABEL);            }        }        if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.OWN_ACTIVE_STATIONS_LABEL)) {            if (as.getProposals() != null && !as.getProposals().isEmpty()) {                Map<EAVDAMUser, AISFixedStationData> proposals = as.getProposals();                for (Object key : proposals.keySet()) {                                            String organizationName = ((EAVDAMUser) key).getOrganizationName();                    tabbedPane.addTab(StationInformationMenuItem.PROPOSAL_FROM_LABEL + " " + organizationName, null, new JPanel(), StationInformationMenuItem.PROPOSAL_FROM_LABEL + " " + organizationName);                }            }        } else if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL)) {                if (as.getProposals() != null && !as.getProposals().isEmpty()) {                Map<EAVDAMUser, AISFixedStationData> proposals = as.getProposals();                if (proposals.size() == 1) {                    tabbedPane.addTab(StationInformationMenuItem.PROPOSAL_TO_LABEL, null, new JPanel(), StationInformationMenuItem.PROPOSAL_TO_LABEL);                }            }                    }        tabbedPane.addChangeListener(this);        ignoreListeners = false;    }    private void initializeTabbedPane(AISFixedStationData stationData) {        ignoreListeners = true;        tabbedPane.removeAll();        if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.SIMULATION_LABEL)) {            if (stationData.getStatus().getStatusID() == DerbyDBInterface.STATUS_SIMULATED) {                tabbedPane.addTab(StationInformationMenuItem.SIMULATED_LABEL, null, new JPanel(), StationInformationMenuItem.SIMULATED_LABEL);            }        }        tabbedPane.addChangeListener(this);        ignoreListeners = false;    }        public void itemStateChanged(ItemEvent e) {                if (ignoreListeners) {            return;        }        if (selectDatasetComboBox != null && e.getItemSelectable() == selectDatasetComboBox && e.getStateChange() == ItemEvent.SELECTED) {            if (selectStationPanel != null) {                selectStationPanel.setVisible(true);                updateSelectStationComboBox(0);                if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.OWN_ACTIVE_STATIONS_LABEL)) {                    addStationButton.setVisible(true);					viewContactInformationButton.setVisible(false);                    deleteSimulationButton.setVisible(false);                                         saveButton.setVisible(true);                    deleteButton.setVisible(true);					addPlannedButton.setVisible(true);                    makeOperativeButton.setVisible(true);                    proposeChangesButton.setVisible(false);                                    } else if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.SIMULATION_LABEL)) {                     addStationButton.setVisible(true);					viewContactInformationButton.setVisible(false);					                    deleteSimulationButton.setVisible(true);                      saveButton.setVisible(true);                    deleteButton.setVisible(true);					addPlannedButton.setVisible(false);                    makeOperativeButton.setVisible(false);                                            proposeChangesButton.setVisible(false);                 } else if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL)) {                      addStationButton.setVisible(false);					viewContactInformationButton.setVisible(true);					                    deleteSimulationButton.setVisible(false);                                                                    saveButton.setVisible(false);                    deleteButton.setVisible(false);					addPlannedButton.setVisible(false);                    makeOperativeButton.setVisible(false);                    proposeChangesButton.setVisible(true);                 }                if (selectStationComboBox.getItemCount() <= 0) {                    selectStationComboBox.setVisible(false);                    tabbedPane.setVisible(false);                      } else {                    selectStationComboBox.setVisible(true);                    if (data != null) {                        if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.OWN_ACTIVE_STATIONS_LABEL)) {                            if (data.getActiveStations() != null && !data.getActiveStations().isEmpty()) {                                ActiveStation as = data.getActiveStations().get(0);                                initializeTabbedPane(as);                            } else {                                tabbedPane.removeAll();                            }                        } else if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.SIMULATION_LABEL)) {                                           if (data.getSimulatedStations() != null && !data.getSimulatedStations().isEmpty()) {                                Simulation s = data.getSimulatedStations().get(0);                                if (s.getStations() != null && !s.getStations().isEmpty()) {                                    AISFixedStationData stationData = s.getStations().get(0);                                    initializeTabbedPane(stationData);                                } else {                                    tabbedPane.removeAll();                                                            }                            }                        } else if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL)) {                                          if (data.getOtherUsersStations() != null && !data.getOtherUsersStations().isEmpty()) {                                OtherUserStations ous = data.getOtherUsersStations().get(0);                                if (ous.getStations() != null && !ous.getStations().isEmpty()) {                                    ActiveStation as = ous.getStations().get(0);                                    initializeTabbedPane(as);                                                                } else {                                    tabbedPane.removeAll();                                }                            }                        }                    } else {                        tabbedPane.removeAll();                    }                    tabbedPane.addChangeListener(this);                        if (tabbedPane.getTabCount() == 0) {                        tabbedPane.setVisible(false);                    } else {                                    tabbedPane.setVisible(true);                                      updateTabbedPane();                    }                   }            }               } else if (antennaTypeComboBox != null && e.getItemSelectable() == antennaTypeComboBox && e.getStateChange() == ItemEvent.SELECTED) {                         updateAntennaTypeComboBox();                                                        if (isChanged(selectStationComboBox.getSelectedIndex())) {                saveButton.setEnabled(true);            } else {                saveButton.setEnabled(false);            }			           } else if (selectStationComboBox != null && e.getItemSelectable() == selectStationComboBox) {                        if (e.getStateChange() == ItemEvent.DESELECTED) {                for (int i=0; i<selectStationComboBox.getItemCount(); i++) {                    if (selectStationComboBox.getItemAt(i).equals(e.getItem())) {                        previouslySelectedStationIndex = i;                        break;                    }                }            } else if (e.getStateChange() == ItemEvent.SELECTED) {     				ignoreListeners = true;                if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.OWN_ACTIVE_STATIONS_LABEL)) {                                                            ActiveStation as = data.getActiveStations().get(selectStationComboBox.getSelectedIndex());                                       if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL)) {                        if (saveButton.isEnabled()) {                            int response = JOptionPane.showConfirmDialog(dialog,                                "Do you want to save the changes made to the current planned station?",                                "Confirm action", JOptionPane.YES_NO_CANCEL_OPTION);                            if (response == JOptionPane.YES_OPTION) {                                boolean success = saveStation(previouslySelectedStationIndex);                                if (success) {                                    saveButton.setEnabled(false);                                    initializeTabbedPane(as);                                      updateTabbedPane();                                }                            } else if (response == JOptionPane.NO_OPTION) {                                                      initializeTabbedPane(as);                                                              updateTabbedPane();                            } else if (response == JOptionPane.CANCEL_OPTION) {                                // do nothing                            }                                            } else {                            initializeTabbedPane(as);                							updateTabbedPane();                        }                    } else {                        initializeTabbedPane(as);                						updateTabbedPane();                    }                } else {                                      updateTabbedPane();                }				ignoreListeners = false;            }					} else if ((stationTypeComboBox != null && e.getItemSelectable() == stationTypeComboBox) ||				(channelAComboBox != null && e.getItemSelectable() == channelAComboBox) ||				(channelBComboBox != null && e.getItemSelectable() == channelBComboBox)) {							if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL) ||					tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.SIMULATED_LABEL) ||					tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_TO_LABEL)) {							if (stationTypeComboBox != null && e.getItemSelectable() == stationTypeComboBox && e.getStateChange() == ItemEvent.DESELECTED) {					if (oldStationTypeIndex == -1) {						for (int i=0; i< stationTypeComboBox.getItemCount(); i++) {										if (e.getItem() == stationTypeComboBox.getItemAt(i)) {								oldStationTypeIndex = i;								break;							}							}							}						} else if ((stationTypeComboBox != null && e.getItemSelectable() == stationTypeComboBox && e.getStateChange() == ItemEvent.SELECTED)) {					if (oldStationTypeIndex != -1) {						if ((channelAPanel == null || getFATDMAScheme(channelAPanel.getComponents(), false).isEmpty()) &&								(channelBPanel == null || getFATDMAScheme(channelBPanel.getComponents(), false).isEmpty())) {							updateChannelComboBoxesAndScrollPanes(null, null, true, true, true, true, false, false);						} else {							int response = JOptionPane.showConfirmDialog(dialog, "Are you sure you want change the station type? This will reset the FATDMA information.", "Confirm action", JOptionPane.YES_NO_OPTION);							if (response == JOptionPane.YES_OPTION) {								updateChannelComboBoxesAndScrollPanes(null, null, true, true, true, true, false, false);							} else {								ignoreListeners = true;								stationTypeComboBox.setSelectedIndex(oldStationTypeIndex);														ignoreListeners = false;													}										}						oldStationTypeIndex = -1;						}									} else if (channelAComboBox != null && e.getItemSelectable() == channelAComboBox && e.getStateChange() == ItemEvent.DESELECTED) {					if (oldChannelAIndex == -1) {						for (int i=0; i< channelAComboBox.getItemCount(); i++) {										if (e.getItem() == channelAComboBox.getItemAt(i)) {								oldChannelAIndex = i;								break;							}						}					}										} else if (channelAComboBox != null && e.getItemSelectable() == channelAComboBox && e.getStateChange() == ItemEvent.SELECTED) {								if (oldChannelAIndex != -1) {						if (channelAPanel == null || getFATDMAScheme(channelAPanel.getComponents(), false).isEmpty()) {							updateChannelComboBoxesAndScrollPanes(null, null, true, false, true, false, false, false);						} else {							int response = JOptionPane.showConfirmDialog(dialog, "Are you sure you want change the channel A? This will reset the FATDMA information for it.", "Confirm action", JOptionPane.YES_NO_OPTION);							if (response == JOptionPane.YES_OPTION) {								updateChannelComboBoxesAndScrollPanes(null, null, true, false, true, false, false, false);							} else {								ignoreListeners = true;								channelAComboBox.setSelectedIndex(oldChannelAIndex);								ignoreListeners = false;							}						}						oldChannelAIndex = -1;									}										} else if (channelBComboBox != null && e.getItemSelectable() == channelBComboBox && e.getStateChange() == ItemEvent.DESELECTED) {					if (oldChannelBIndex == -1) {						for (int i=0; i< channelBComboBox.getItemCount(); i++) {										if (e.getItem() == channelBComboBox.getItemAt(i)) {								oldChannelBIndex = i;								break;							}						}					}														} else if (channelBComboBox != null && e.getItemSelectable() == channelBComboBox && e.getStateChange() == ItemEvent.SELECTED) {     					if (oldChannelBIndex != -1) {						if (channelBPanel == null || getFATDMAScheme(channelBPanel.getComponents(), false).isEmpty()) {							updateChannelComboBoxesAndScrollPanes(null, null, false, true, false, true, false, false);						} else {							int response = JOptionPane.showConfirmDialog(dialog, "Are you sure you want change the channel B? This will reset the FATDMA information for it.", "Confirm action", JOptionPane.YES_NO_OPTION);							if (response == JOptionPane.YES_OPTION) {								updateChannelComboBoxesAndScrollPanes(null, null, false, true, false, true, false, false);							} else {								ignoreListeners = true;													channelBComboBox.setSelectedIndex(oldChannelBIndex);								ignoreListeners = false;							}								}						oldChannelBIndex = -1;									}				}			}			            if (isChanged(selectStationComboBox.getSelectedIndex())) {                saveButton.setEnabled(true);            } else {                saveButton.setEnabled(false);            }							} else if ((selectIALADefaultFATDMASchemeComboBox != null && e.getItemSelectable() == selectIALADefaultFATDMASchemeComboBox) ||						(baseStationReportInCheckBox != null && e.getItemSelectable() == baseStationReportInCheckBox) ||				(semaphoreModeRadioButton != null && e.getItemSelectable() == semaphoreModeRadioButton) ||				(nonSemaphoreModeRadioButton != null && e.getItemSelectable() == nonSemaphoreModeRadioButton) ||				(fatdmaReservationOnChACheckBox != null && e.getItemSelectable() == fatdmaReservationOnChACheckBox) ||						(fatdmaReservationOnChBCheckBox != null && e.getItemSelectable() == fatdmaReservationOnChBCheckBox) ||				(oneAdditionalTimeslotOnChACheckBox != null && e.getItemSelectable() == oneAdditionalTimeslotOnChACheckBox) ||				(oneAdditionalTimeslotOnChBCheckBox != null && e.getItemSelectable() == oneAdditionalTimeslotOnChBCheckBox) ||				(additionalBlocksForChAComboBox != null && e.getItemSelectable() == additionalBlocksForChAComboBox) ||										(additionalBlocksForChBComboBox != null && e.getItemSelectable() == additionalBlocksForChBComboBox) ||					(additionalTimeslotsForChAComboBox != null && e.getItemSelectable() == additionalTimeslotsForChAComboBox) ||				(additionalTimeslotsForChBComboBox != null && e.getItemSelectable() == additionalTimeslotsForChBComboBox)) {				if (baseStationReportInCheckBox != null && e.getItemSelectable() == baseStationReportInCheckBox) {				if (baseStationReportInCheckBox.isSelected()) {					if (semaphoreModeRadioButton != null) {						semaphoreModeRadioButton.setEnabled(true);					}					if (nonSemaphoreModeRadioButton != null) {						nonSemaphoreModeRadioButton.setEnabled(true);					}				} else {					if (semaphoreModeRadioButton != null) {										semaphoreModeRadioButton.setEnabled(false);					}					if (nonSemaphoreModeRadioButton != null) {						nonSemaphoreModeRadioButton.setEnabled(false);					}				}			}			updateTimeslotsReservedTextFields();		}    }    	private void updateTimeslotsReservedTextFields() {		if (semaphoreModeRadioButton == null) {			return;		}				List<TimeslotReservation> timeslotReservationsForChannelA = new ArrayList<TimeslotReservation>();		List<TimeslotReservation> timeslotReservationsForChannelB = new ArrayList<TimeslotReservation>();			int timeslotsReservedForChannelA = 0;		int timeslotsReservedForChannelB = 0;					Map<String,List<FATDMACell>> fatdmaCellsMap = DefaultFATDMAReader.readDefaultValues(null, null);		List<FATDMACell> fatdmaCells = fatdmaCellsMap.get((String) selectIALADefaultFATDMASchemeComboBox.getSelectedItem());					if (fatdmaCells != null && fatdmaCells.size() == 3) {						if (baseStationReportInCheckBox.isSelected()) {						FATDMACell baseStationFATDMACell = fatdmaCells.get(0);				FATDMADefaultChannel baseStationChannelA = baseStationFATDMACell.getChannelA();				FATDMANode channelAFATDMANode = null;				if (semaphoreModeRadioButton.isSelected()) {					channelAFATDMANode = baseStationChannelA.getSemaphoreNode();				} else {					channelAFATDMANode = baseStationChannelA.getNonSemaphoreNode(); 				}				int startslot = channelAFATDMANode.getStartingSlot().intValue();				int blockSize = channelAFATDMANode.getBlockSize().intValue();				int increment = channelAFATDMANode.getIncrement().intValue();				timeslotsReservedForChannelA = increaseTimeslotsReserved(startslot, blockSize, increment, timeslotsReservedForChannelA);						timeslotReservationsForChannelA.add(new TimeslotReservation(startslot, blockSize, increment));								FATDMADefaultChannel baseStationChannelB = baseStationFATDMACell.getChannelB();				FATDMANode channelBFATDMANode = null;				if (semaphoreModeRadioButton.isSelected()) {					channelBFATDMANode = baseStationChannelB.getSemaphoreNode();				} else {					channelBFATDMANode = baseStationChannelB.getNonSemaphoreNode(); 				}				startslot = channelBFATDMANode.getStartingSlot().intValue();				blockSize = channelBFATDMANode.getBlockSize().intValue();				increment = channelBFATDMANode.getIncrement().intValue();				timeslotsReservedForChannelB = increaseTimeslotsReserved(startslot, blockSize, increment, timeslotsReservedForChannelB);				timeslotReservationsForChannelB.add(new TimeslotReservation(startslot, blockSize, increment));			}						FATDMACell datalinkManagementFATDMACell = fatdmaCells.get(1);									FATDMADefaultChannel datalinkManagementChannelA = datalinkManagementFATDMACell.getChannelA();			if (fatdmaReservationOnChACheckBox.isSelected()) {				int startslot = datalinkManagementChannelA.getSemaphoreNode().getStartingSlot().intValue();				int blockSize = datalinkManagementChannelA.getSemaphoreNode().getBlockSize().intValue();				int increment = -1;								if (!oneAdditionalTimeslotOnChACheckBox.isSelected()) {					increment = datalinkManagementChannelA.getSemaphoreNode().getIncrement().intValue();				} else {					increment = datalinkManagementChannelA.getNonSemaphoreNode().getIncrement().intValue();				}				timeslotsReservedForChannelA = increaseTimeslotsReserved(startslot, blockSize, increment, timeslotsReservedForChannelA);				timeslotReservationsForChannelA.add(new TimeslotReservation(startslot, blockSize, increment));			}											FATDMADefaultChannel datalinkManagementChannelB = datalinkManagementFATDMACell.getChannelB();											if (fatdmaReservationOnChBCheckBox.isSelected()) {				int startslot = datalinkManagementChannelB.getSemaphoreNode().getStartingSlot().intValue();				int blockSize = datalinkManagementChannelB.getSemaphoreNode().getBlockSize().intValue();				int increment = -1;				if (!oneAdditionalTimeslotOnChBCheckBox.isSelected()) {					increment = datalinkManagementChannelB.getSemaphoreNode().getIncrement().intValue();				} else {					increment = datalinkManagementChannelB.getNonSemaphoreNode().getIncrement().intValue();				}				timeslotsReservedForChannelB = increaseTimeslotsReserved(startslot, blockSize, increment, timeslotsReservedForChannelB);				timeslotReservationsForChannelB.add(new TimeslotReservation(startslot, blockSize, increment));							}								FATDMACell generalPurposeFATDMACell = fatdmaCells.get(2);						FATDMADefaultChannel generalPurposeChannelA = generalPurposeFATDMACell.getChannelA();			if (Integer.parseInt((String) additionalBlocksForChAComboBox.getSelectedItem()) > 0) {				int startslot = generalPurposeChannelA.getSemaphoreNode().getStartingSlot().intValue();				int blockSize = Integer.parseInt((String) additionalTimeslotsForChAComboBox.getSelectedItem());				int increment = -1;				if (Integer.parseInt((String) additionalBlocksForChAComboBox.getSelectedItem()) == 1) {					increment = generalPurposeChannelA.getSemaphoreNode().getIncrement().intValue();				} else if (Integer.parseInt((String) additionalBlocksForChAComboBox.getSelectedItem()) == 2) {					increment = generalPurposeChannelA.getNonSemaphoreNode().getIncrement().intValue();				}				timeslotsReservedForChannelA = increaseTimeslotsReserved(startslot, blockSize, increment, timeslotsReservedForChannelA);								timeslotReservationsForChannelA.add(new TimeslotReservation(startslot, blockSize, increment));							}						FATDMADefaultChannel generalPurposeChannelB = generalPurposeFATDMACell.getChannelB();						if (Integer.parseInt((String) additionalBlocksForChBComboBox.getSelectedItem()) > 0) {				int startslot = generalPurposeChannelB.getSemaphoreNode().getStartingSlot().intValue();				int blockSize = Integer.parseInt((String) additionalTimeslotsForChBComboBox.getSelectedItem());				int increment = -1;				if (Integer.parseInt((String) additionalBlocksForChBComboBox.getSelectedItem()) == 1) {					increment = generalPurposeChannelB.getSemaphoreNode().getIncrement().intValue();				} else if (Integer.parseInt((String) additionalBlocksForChBComboBox.getSelectedItem()) == 2) {					increment = generalPurposeChannelB.getNonSemaphoreNode().getIncrement().intValue();				}				timeslotsReservedForChannelB = increaseTimeslotsReserved(startslot, blockSize, increment, timeslotsReservedForChannelB);								timeslotReservationsForChannelB.add(new TimeslotReservation(startslot, blockSize, increment));							}		}							chATimeslotsReservedTextField.setText(String.valueOf(timeslotsReservedForChannelA));		chBTimeslotsReservedTextField.setText(String.valueOf(timeslotsReservedForChannelB));		Image timeslotImageForChannelA = ImageHandler.getTimeslotImage(400, 15, timeslotReservationsForChannelA);		if (timeslotImageForChannelA != null) {			chATimeslotsReservedLabel.setIcon(new ImageIcon(timeslotImageForChannelA));		}		Image timeslotImageForChannelB = ImageHandler.getTimeslotImage(400, 15, timeslotReservationsForChannelB);		if (timeslotImageForChannelB != null) {			chBTimeslotsReservedLabel.setIcon(new ImageIcon(timeslotImageForChannelB));		}		}		private int increaseTimeslotsReserved(int startslot, int blockSize, int increment, int timeslotsReserved) {		if (increment == 0) {			for (int i=0; i<blockSize; i++) {				timeslotsReserved++;			}			} else if (increment > 0) {								int i = 0;			while (i*increment <= 2249) {											for (int j=0; j<blockSize; j++) {					timeslotsReserved++;				}				i++;			}				}		return timeslotsReserved;	}		private int getCellNumber() {		if (!latitudeTextField.getText().trim().isEmpty() && !longitudeTextField.getText().trim().isEmpty()) {					try {							float lat = Float.valueOf(latitudeTextField.getText().replace(",", ".").trim());				float lon = Float.valueOf(longitudeTextField.getText().replace(",", ".").trim());						int singleCellSizeInNauticalMiles = 30;				int noOfSingleCellsAlongOneSideOfMasterCell = 6;				int masterCellSizeInNauticalMiles = singleCellSizeInNauticalMiles * noOfSingleCellsAlongOneSideOfMasterCell;						int noOfMasterCellsAroundEquator = (int) (360.0d * 60.0d / masterCellSizeInNauticalMiles);				float masterCellSizeInDegreesLatitude = (float) masterCellSizeInNauticalMiles / 60;  					float singleCellHeightInDegrees = masterCellSizeInDegreesLatitude / noOfSingleCellsAlongOneSideOfMasterCell;				int masterCellRowNo = (int) (Math.abs(lat + (float) 0.5*singleCellHeightInDegrees) / masterCellSizeInDegreesLatitude);				double masterCellMeanLatitude = (masterCellRowNo + 0.5) * masterCellSizeInDegreesLatitude;				int noOfMasterCellsAroundMasterCellRow = (int) (noOfMasterCellsAroundEquator * Math.cos(2*Math.PI*masterCellMeanLatitude/360.0));				float singleCellWidthInDegrees = (float) 360/(noOfSingleCellsAlongOneSideOfMasterCell*noOfMasterCellsAroundMasterCellRow);														return FATDMAGridLayer.getCellNo(lat, lon, singleCellSizeInNauticalMiles, noOfSingleCellsAlongOneSideOfMasterCell, masterCellRowNo, singleCellWidthInDegrees);						} catch (NumberFormatException e) {}			}		return -1;	}	    public void changedUpdate(DocumentEvent e) {        if (ignoreListeners) {            return;        }        /*		if (selectStationComboBox != null && saveButton != null) {            if (isChanged(selectStationComboBox.getSelectedIndex())) {  // takes too much resources so enable every time		*/                saveButton.setEnabled(true);		/*        		} else {                saveButton.setEnabled(false);            }        }		*/    }    public void	insertUpdate(DocumentEvent e) {        if (ignoreListeners) {            return;        }        		/*        if (selectStationComboBox != null && saveButton != null) {            if (isChanged(selectStationComboBox.getSelectedIndex())) {  // takes too much resources so enable every time		*/				saveButton.setEnabled(true);		/*            			} else {                saveButton.setEnabled(false);            }        }		*/    }        public void removeUpdate(DocumentEvent e) {        if (ignoreListeners) {            return;        }		/*        if (selectStationComboBox != null && saveButton != null) {            if (isChanged(selectStationComboBox.getSelectedIndex())) {  // takes too much resources so enable every time		*/			                saveButton.setEnabled(true);		/*            } else {                saveButton.setEnabled(false);            }        }		*/    }            public JButton getButton(String title, int width) {        JButton b = new JButton(title, null);                b.setVerticalTextPosition(AbstractButton.BOTTOM);        b.setHorizontalTextPosition(AbstractButton.CENTER);        b.setPreferredSize(new Dimension(width, 20));        b.setMaximumSize(new Dimension(width, 20));            return b;    }        public JComboBox getComboBox(String[] components) {        JComboBox cb = new JComboBox();        if (components != null) {            for (String c : components) {                cb.addItem(c);            }        }        return cb;    }        public JTextField getTextField(int width) {        JTextField tf = new JTextField(width);        return tf;    }        public JTextArea getTextArea(String contents) {        JTextArea ta = new JTextArea("");        return ta;    }    public GridBagConstraints updateGBC(GridBagConstraints c, int gridx, int gridy, double weightx, int anchor, int fill, Insets insets) {        c.gridx = gridx;        c.gridy = gridy;        c.weightx = weightx;        c.anchor = anchor;        c.fill = fill;        if (insets != null) {            c.insets = insets;        }        return c;    }            private JComponent makeStationPanel() {                ignoreListeners = true;                JPanel panel = new JPanel(new GridBagLayout());                      		panel.setBorder(BorderFactory.createEmptyBorder());		            JPanel p1 = new JPanel(new GridBagLayout());        p1.setBorder(BorderFactory.createTitledBorder("General information"));        GridBagConstraints c = new GridBagConstraints();        c = updateGBC(c, 0, 0, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));         p1.add(new JLabel("Station name:"), c);        c = updateGBC(c, 1, 0, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                       p1.add(stationNameTextField, c);                            c = updateGBC(c, 0, 1, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                        p1.add(new JLabel("Station type:"), c);        c = updateGBC(c, 1, 1, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));         p1.add(stationTypeComboBox, c);                                                                               c = updateGBC(c, 0, 2, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                                              JLabel latitudeLabel = new JLabel("Latitude (in decimal degrees):");		latitudeLabel.setToolTipText("Positive values are in northern hemisphere while negative values are in southern hemisphere");		p1.add(latitudeLabel, c);        c = updateGBC(c, 1, 2, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));         p1.add(latitudeTextField, c);                            c = updateGBC(c, 0, 3, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));              		JLabel longitudeLabel = new JLabel("Longitude (in decimal degrees):");		longitudeLabel.setToolTipText("Positive values are east of Greenwich while negative values are west of Greenwich");        p1.add(longitudeLabel, c);        c = updateGBC(c, 1, 3, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));              p1.add(longitudeTextField, c);                c = updateGBC(c, 0, 4, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                          p1.add(new JLabel("MMSI number:"), c);        c = updateGBC(c, 1, 4, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));               p1.add(mmsiNumberTextField, c);        c = updateGBC(c, 0, 5, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                       p1.add(new JLabel("Transmission power (Watt):"), c);        c = updateGBC(c, 1, 5, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                               p1.add(transmissionPowerTextField, c);        c = updateGBC(c, 0, 0, 0.5, GridBagConstraints.FIRST_LINE_START, GridBagConstraints.HORIZONTAL, new Insets(5,5,5,5));         panel.add(p1, c);                                      JPanel p2 = new JPanel(new GridBagLayout());        p2.setBorder(BorderFactory.createTitledBorder("Antenna information"));                c = updateGBC(c, 0, 0, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));         p2.add(new JLabel("Antenna type:"), c);        c = updateGBC(c, 1, 0, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                      p2.add(antennaTypeComboBox, c);        c = updateGBC(c, 0, 1, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                    p2.add(new JLabel("Antenna height above terrain (m):"), c);        c = updateGBC(c, 1, 1, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                       p2.add(antennaHeightTextField, c);                            c = updateGBC(c, 0, 2, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                  p2.add(new JLabel("Terrain height above sealevel (m):"), c);        c = updateGBC(c, 1, 2, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                    p2.add(terrainHeightTextField, c);         c = updateGBC(c, 0, 3, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));         p2.add(new JLabel("Heading (degrees - integer):"), c);        c = updateGBC(c, 1, 3, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                    p2.add(headingTextField, c);         c = updateGBC(c, 0, 4, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                  p2.add(new JLabel("Field of View angle (degrees - integer):"), c);        c = updateGBC(c, 1, 4, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                      p2.add(fieldOfViewAngleTextField, c);                                                 c = updateGBC(c, 0, 5, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                  p2.add(new JLabel("Gain (dB):"), c);        c = updateGBC(c, 1, 5, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                    p2.add(gainTextField, c);                               c = updateGBC(c, 1, 0, 0.5, GridBagConstraints.FIRST_LINE_START, GridBagConstraints.HORIZONTAL, new Insets(5,5,5,5));         panel.add(p2, c);				fatdmaPanel = new JPanel(new GridBagLayout());		fatdmaPanel.setBorder(BorderFactory.createTitledBorder("FATDMA information"));		c = updateGBC(c, 0, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));		fatdmaPanel.add(new JLabel("Channel A:"), c);		c = updateGBC(c, 1, 0, 1, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                    		fatdmaPanel.add(channelAComboBox, c);		c = updateGBC(c, 0, 1, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));		fatdmaPanel.add(new JLabel("Channel B:"), c);		c = updateGBC(c, 1, 1, 1, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                    		fatdmaPanel.add(channelBComboBox, c);		c = updateGBC(c, 0, 1, 0.5, GridBagConstraints.FIRST_LINE_START, GridBagConstraints.HORIZONTAL, new Insets(5,5,5,5)); 		c.gridwidth = 2; 		panel.add(fatdmaPanel, c); 		c.gridwidth = 1;                                                         additionalInformationJTextArea.setLineWrap(true);        additionalInformationJTextArea.setWrapStyleWord(true);        JScrollPane p3 = new JScrollPane(additionalInformationJTextArea);        p3.setBorder(BorderFactory.createTitledBorder("Additional information"));        p3.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);        p3.setPreferredSize(new Dimension(580, 90));        p3.setMaximumSize(new Dimension(580, 90));        c = updateGBC(c, 0, 2, 0.5, GridBagConstraints.FIRST_LINE_START, GridBagConstraints.HORIZONTAL, new Insets(5,5,5,5));         c.gridwidth = 2;        panel.add(p3, c);						JScrollPane scrollPane = new JScrollPane(panel);		scrollPane.setBorder(BorderFactory.createEmptyBorder());        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);        scrollPane.setPreferredSize(new Dimension(WINDOW_WIDTH, WINDOW_HEIGHT-40));        scrollPane.setMaximumSize(new Dimension(WINDOW_WIDTH, WINDOW_HEIGHT-40));				JPanel containerPane = new JPanel();		containerPane.setBorder(BorderFactory.createEmptyBorder());		containerPane.setLayout(new BorderLayout());		 		containerPane.add(scrollPane, BorderLayout.CENTER);        //JPanel buttonPanel = new JPanel(new GridBagLayout());        		JPanel buttonPanel = new JPanel();		buttonPanel.setBorder(BorderFactory.createEmptyBorder(20, 0, 0, 0));        c = updateGBC(c, 0, 0, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));         c.gridwidth = 1;        if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL)) {            buttonPanel.add(deleteButton);//, c);            c.gridx = 1;			buttonPanel.add(addPlannedButton);//, c);			c.gridx = 2;            buttonPanel.add(proposeChangesButton);//, c);                        c.gridx = 3;            buttonPanel.add(exitButton);//, c);                            } else if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL)) {            saveButton.setEnabled(false);            buttonPanel.add(saveButton);//, c);            c.gridx = 1;			buttonPanel.add(deleteButton);//, c);			c.gridx = 2;            buttonPanel.add(makeOperativeButton);//, c);            c.gridx = 3;            buttonPanel.add(proposeChangesButton);//, c);            c.gridx = 4;            buttonPanel.add(exitButton);// c);        } else if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.SIMULATED_LABEL)) {            buttonPanel.add(deleteButton);//, c);            c.gridx = 1;            saveButton.setEnabled(false);            buttonPanel.add(saveButton);//, c);            c.gridx = 2;            buttonPanel.add(exitButton);//, c);        } else if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_FROM_LABEL)) {            buttonPanel.add(deleteButton);//, c);            c.gridx = 1;            buttonPanel.add(exitButton);//, c);        } else if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_TO_LABEL)) {            saveButton.setVisible(true);            saveButton.setEnabled(false);            buttonPanel.add(saveButton);//, c);            c.gridx = 1;                        deleteButton.setVisible(true);            buttonPanel.add(deleteButton);//, c);            c.gridx = 2;            buttonPanel.add(exitButton);//, c);        }		containerPane.add(buttonPanel, BorderLayout.SOUTH);                 // updates form fields' statuses (enabled or disabled)                if ((((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL) &&                (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) ||                tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL))) ||                tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) ||                tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_FROM_LABEL)) {            stationNameTextField.setEnabled(false);            configureDisabledTextField(stationNameTextField);            stationTypeComboBox.setEnabled(false);                                        configureDisabledComboBox(stationTypeComboBox);            latitudeTextField.setEnabled(false);                                        configureDisabledTextField(latitudeTextField);            longitudeTextField.setEnabled(false);                                         configureDisabledTextField(longitudeTextField);                        mmsiNumberTextField.setEnabled(false);            configureDisabledTextField(mmsiNumberTextField);                        transmissionPowerTextField.setEnabled(false);              configureDisabledTextField(transmissionPowerTextField);            antennaTypeComboBox.setEnabled(false);               configureDisabledComboBox(antennaTypeComboBox);            antennaHeightTextField.setEnabled(false);               configureDisabledTextField(antennaHeightTextField);             terrainHeightTextField.setEnabled(false);               configureDisabledTextField(terrainHeightTextField);             headingTextField.setEnabled(false);               configureDisabledTextField(headingTextField);             fieldOfViewAngleTextField.setEnabled(false);                                                               configureDisabledTextField(fieldOfViewAngleTextField);             gainTextField.setEnabled(false);             configureDisabledTextField(gainTextField);             additionalInformationJTextArea.setEnabled(false);                           configureDisabledTextArea(additionalInformationJTextArea);        } else if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL) ||                tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.SIMULATED_LABEL) ||                tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_TO_LABEL)) {                            stationNameTextField.setEnabled(true);            stationTypeComboBox.setEnabled(true);               stationTypeComboBox.setEditable(false);                                                 latitudeTextField.setEnabled(true);                                        longitudeTextField.setEnabled(true);                                                     mmsiNumberTextField.setEnabled(true);                       transmissionPowerTextField.setEnabled(true);                     antennaTypeComboBox.setEnabled(true);               antennaTypeComboBox.setEditable(false);             antennaHeightTextField.setEnabled(true);               terrainHeightTextField.setEnabled(true);               headingTextField.setEnabled(true);               fieldOfViewAngleTextField.setEnabled(true);                                                               gainTextField.setEnabled(true);             additionalInformationJTextArea.setEnabled(true);                                  }				if (tabbedPane.getTabCount() > 1 && tabbedPane.getTitleAt(1).equals(StationInformationMenuItem.PLANNED_LABEL)) {			addPlannedButton.setVisible(false);		} else {			addPlannedButton.setVisible(true);					}        if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL)) {			viewContactInformationButton.setVisible(true);            if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) ||                    tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL)) {                addStationButton.setVisible(false);                deleteSimulationButton.setVisible(false);                                                                saveButton.setVisible(false);                deleteButton.setVisible(false);				addPlannedButton.setVisible(false);                makeOperativeButton.setVisible(false);                proposeChangesButton.setVisible(true);            } else if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_TO_LABEL)) {                                      addStationButton.setVisible(false);                deleteSimulationButton.setVisible(false);                                                                saveButton.setVisible(true);                deleteButton.setVisible(true);   				addPlannedButton.setVisible(false);                makeOperativeButton.setVisible(false);                proposeChangesButton.setVisible(true);                                     }        } else {            proposeChangesButton.setVisible(false);                           }        // updates form fields contents        int selectedIndex = selectStationComboBox.getSelectedIndex();        if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL)) {            if (data != null && data.getOtherUsersStations() != null) {                                for (OtherUserStations ous : data.getOtherUsersStations()) {                    if (((String) selectDatasetComboBox.getSelectedItem()).endsWith(ous.getUser().getOrganizationName())) {                        List<ActiveStation> stations = ous.getStations();                        if (stations != null && selectedIndex < stations.size()) {                            ActiveStation as = stations.get(selectedIndex);                            if (as.getProposals() == null || as.getProposals().isEmpty()) {                                proposeChangesButton.setVisible(true);                            } else {                                proposeChangesButton.setVisible(false);                            }                        }                    }                }            }                       }            AISFixedStationData selectedStationData = getSelectedStationData(selectedIndex);                if (selectedStationData != null) {            if (selectedStationData.getStationName() != null) {                stationNameTextField.setText(selectedStationData.getStationName());            } else {                stationNameTextField.setText("");                            }            if (selectedStationData.getStationType() != null) {                if (selectedStationData.getStationType() == AISFixedStationType.BASESTATION) {                    stationTypeComboBox.setSelectedIndex(0);                } else if (selectedStationData.getStationType() == AISFixedStationType.REPEATER) {                    stationTypeComboBox.setSelectedIndex(1);                } else if (selectedStationData.getStationType() == AISFixedStationType.RECEIVER) {                    stationTypeComboBox.setSelectedIndex(2);                } else if (selectedStationData.getStationType() == AISFixedStationType.ATON) {                    stationTypeComboBox.setSelectedIndex(3);                }            } else {                stationTypeComboBox.setSelectedIndex(0);            }            if (!Double.isNaN(selectedStationData.getLat())) {                                latitudeTextField.setText(String.valueOf(selectedStationData.getLat()));                                     } else {                latitudeTextField.setText("");            }            if (!Double.isNaN(selectedStationData.getLon())) {                  longitudeTextField.setText(String.valueOf(selectedStationData.getLon()));            } else {                longitudeTextField.setText("");            }            if (selectedStationData.getMmsi() != null) {                mmsiNumberTextField.setText(selectedStationData.getMmsi());            } else {                mmsiNumberTextField.setText("");            }            if (selectedStationData.getTransmissionPower() != null) {                transmissionPowerTextField.setText(selectedStationData.getTransmissionPower().toString());            } else {                transmissionPowerTextField.setText("");            }            if (selectedStationData.getAntenna() != null) {                Antenna antenna = selectedStationData.getAntenna();                if (antenna.getAntennaType() != null) {                    if (antenna.getAntennaType() == AntennaType.OMNIDIRECTIONAL) {                        antennaTypeComboBox.setSelectedIndex(1);                    } else if (antenna.getAntennaType() == AntennaType.DIRECTIONAL) {                        antennaTypeComboBox.setSelectedIndex(2);                    }                } else {                    antennaTypeComboBox.setSelectedIndex(0);                }                if (!Double.isNaN(antenna.getAntennaHeight())) {                    antennaHeightTextField.setText(String.valueOf(antenna.getAntennaHeight()));                } else {                    antennaHeightTextField.setText("");                }                if (!Double.isNaN(antenna.getTerrainHeight())) {                    terrainHeightTextField.setText(String.valueOf(antenna.getTerrainHeight()));                } else {                    terrainHeightTextField.setText("");                }                                if (antenna.getHeading() != null) {                    headingTextField.setText(antenna.getHeading().toString());                } else {                    headingTextField.setText("");                }                if (antenna.getFieldOfViewAngle() != null) {                    fieldOfViewAngleTextField.setText(antenna.getFieldOfViewAngle().toString());                } else {                    fieldOfViewAngleTextField.setText("");                }                if (antenna.getGain() != null) {                    gainTextField.setText(antenna.getGain().toString());                } else {                    gainTextField.setText("");                }                                } else {                           antennaTypeComboBox.setSelectedIndex(0);            }			if (channelAPanel != null) {				channelAPanel.removeAll();			}			if (channelBPanel != null) {				channelBPanel.removeAll();				}			if (selectedStationData.getFATDMAChannelA() != null) {				channelAComboBox.setSelectedItem(selectedStationData.getFATDMAChannelA().getChannelName());				if (selectedStationData.getFATDMAChannelA() instanceof AISBaseAndReceiverStationFATDMAChannel) {					AISBaseAndReceiverStationFATDMAChannel fatdmaChannel = (AISBaseAndReceiverStationFATDMAChannel) selectedStationData.getFATDMAChannelA();					List<FATDMAReservation> fatdmaScheme = fatdmaChannel.getFATDMAScheme();					List<Component> initialChannelAComponents = new ArrayList<Component>();					for (FATDMAReservation fatdmaReservation : fatdmaScheme) {																	JTextField startslotTextField = new JTextField(fatdmaReservation.getStartslot().toString(), 8);						startslotTextField.getDocument().addDocumentListener(this);						initialChannelAComponents.add(startslotTextField);						JTextField blockSizeTextField = new JTextField(fatdmaReservation.getBlockSize().toString(), 8);						blockSizeTextField.getDocument().addDocumentListener(this);						initialChannelAComponents.add(blockSizeTextField);						JTextField incrementTextField = new JTextField(fatdmaReservation.getIncrement().toString(), 8);						incrementTextField.getDocument().addDocumentListener(this);						initialChannelAComponents.add(incrementTextField);						Component component = new JComboBox();															((JComboBox) component).addItem("Local");						((JComboBox) component).addItem("Remote");						((JComboBox) component).setBorder(new EmptyBorder(0, 3, 0, 3));						if (fatdmaReservation.getOwnership().toString().equals("L")) {							((JComboBox) component).setSelectedItem("Local");						} else if (fatdmaReservation.getOwnership().toString().equals("R")) {							((JComboBox) component).setSelectedItem("Remote");						}						((JComboBox) component).addActionListener(this);												initialChannelAComponents.add(component);						JTextField usageTextField = new JTextField(fatdmaReservation.getUsage(), 8);						usageTextField.getDocument().addDocumentListener(this);						initialChannelAComponents.add(usageTextField);												Component component2 = new JButton("Clear");							((JButton) component2).setMargin(new Insets(0, 3, 0, 3));						((JButton) component2).addActionListener(this);						initialChannelAComponents.add(component2);																}					updateChannelComboBoxesAndScrollPanes(initialChannelAComponents, null, false, false, true, false, false, false);										ignoreListeners = true;				} else if (selectedStationData.getFATDMAChannelA() instanceof AISAtonStationFATDMAChannel) {					AISAtonStationFATDMAChannel fatdmaChannel = (AISAtonStationFATDMAChannel) selectedStationData.getFATDMAChannelA();					List<AtonMessageBroadcastRate> atonMessageBroadcastList = fatdmaChannel.getAtonMessageBroadcastList();					List<Component> initialChannelAComponents = new ArrayList<Component>();					for (AtonMessageBroadcastRate atonMessageBroadcastRate : atonMessageBroadcastList) {						Component component = new JComboBox();															((JComboBox) component).addItem("FATDMA");						((JComboBox) component).addItem("RATDMA");						((JComboBox) component).addItem("CSTDMA");						((JComboBox) component).setBorder(new EmptyBorder(0, 3, 0, 3));						((JComboBox) component).setSelectedItem(atonMessageBroadcastRate.getAccessScheme().toString());						((JComboBox) component).addActionListener(this);							initialChannelAComponents.add(component);								JTextField messageIDTextField = new JTextField(atonMessageBroadcastRate.getMessageID().toString(), 8);						messageIDTextField.getDocument().addDocumentListener(this);						initialChannelAComponents.add(messageIDTextField);									JTextField utcHourTextField = new JTextField(atonMessageBroadcastRate.getUTCHour().toString(), 8);						utcHourTextField.getDocument().addDocumentListener(this);						initialChannelAComponents.add(utcHourTextField);									JTextField utcMinuteTextField = new JTextField(atonMessageBroadcastRate.getUTCMinute().toString(), 8);						utcMinuteTextField.getDocument().addDocumentListener(this);						initialChannelAComponents.add(utcMinuteTextField);						JTextField startslotTextField = new JTextField(atonMessageBroadcastRate.getStartslot().toString(), 8);						startslotTextField.getDocument().addDocumentListener(this);						initialChannelAComponents.add(startslotTextField);									JTextField blockSizeTextField = new JTextField(atonMessageBroadcastRate.getBlockSize().toString(), 8);						blockSizeTextField.getDocument().addDocumentListener(this);						initialChannelAComponents.add(blockSizeTextField);						JTextField incrementTextField = new JTextField(atonMessageBroadcastRate.getIncrement().toString(), 8);						incrementTextField.getDocument().addDocumentListener(this);						initialChannelAComponents.add(incrementTextField);						JTextField usageTextField = new JTextField(atonMessageBroadcastRate.getUsage(), 8);						usageTextField.getDocument().addDocumentListener(this);						initialChannelAComponents.add(usageTextField);						Component component2 = new JButton("Clear");							((JButton) component2).setMargin(new Insets(0, 3, 0, 3));						((JButton) component2).addActionListener(this);						initialChannelAComponents.add(component2);					}					updateChannelComboBoxesAndScrollPanes(initialChannelAComponents, null, false, false, true, false, false, false);											ignoreListeners = true;									}							} else {				channelAComboBox.setSelectedItem("NULL");			}			if (selectedStationData.getFATDMAChannelB() != null) {				channelBComboBox.setSelectedItem(selectedStationData.getFATDMAChannelB().getChannelName());				if (selectedStationData.getFATDMAChannelB() instanceof AISBaseAndReceiverStationFATDMAChannel) {					AISBaseAndReceiverStationFATDMAChannel fatdmaChannel = (AISBaseAndReceiverStationFATDMAChannel) selectedStationData.getFATDMAChannelB();					List<FATDMAReservation> fatdmaScheme = fatdmaChannel.getFATDMAScheme();					List<Component> initialChannelBComponents = new ArrayList<Component>();					for (FATDMAReservation fatdmaReservation : fatdmaScheme) {												JTextField startslotTextField = new JTextField(fatdmaReservation.getStartslot().toString(), 8);						startslotTextField.getDocument().addDocumentListener(this);						initialChannelBComponents.add(startslotTextField);									JTextField blockSizeTextField = new JTextField(fatdmaReservation.getBlockSize().toString(), 8);						blockSizeTextField.getDocument().addDocumentListener(this);						initialChannelBComponents.add(blockSizeTextField);						JTextField incrementTextField = new JTextField(fatdmaReservation.getIncrement().toString(), 8);						incrementTextField.getDocument().addDocumentListener(this);						initialChannelBComponents.add(incrementTextField);						Component component = new JComboBox();															((JComboBox) component).addItem("Local");						((JComboBox) component).addItem("Remote");						((JComboBox) component).setBorder(new EmptyBorder(0, 3, 0, 3));						if (fatdmaReservation.getOwnership().toString().equals("L")) {							((JComboBox) component).setSelectedItem("Local");						} else if (fatdmaReservation.getOwnership().toString().equals("R")) {							((JComboBox) component).setSelectedItem("Remote");						}						((JComboBox) component).addActionListener(this);							initialChannelBComponents.add(component);						JTextField usageTextField = new JTextField(fatdmaReservation.getUsage(), 8);						usageTextField.getDocument().addDocumentListener(this);						initialChannelBComponents.add(usageTextField);						Component component2 = new JButton("Clear");							((JButton) component2).setMargin(new Insets(0, 3, 0, 3));						((JButton) component2).addActionListener(this);						initialChannelBComponents.add(component2);											}					updateChannelComboBoxesAndScrollPanes(null, initialChannelBComponents, false, false, false, true, false, false);					ignoreListeners = true;									} else if (selectedStationData.getFATDMAChannelB() instanceof AISAtonStationFATDMAChannel) {					AISAtonStationFATDMAChannel fatdmaChannel = (AISAtonStationFATDMAChannel) selectedStationData.getFATDMAChannelB();					List<AtonMessageBroadcastRate> atonMessageBroadcastList = fatdmaChannel.getAtonMessageBroadcastList();					List<Component> initialChannelBComponents = new ArrayList<Component>();					for (AtonMessageBroadcastRate atonMessageBroadcastRate : atonMessageBroadcastList) {						Component component = new JComboBox();															((JComboBox) component).addItem("FATDMA");						((JComboBox) component).addItem("RATDMA");						((JComboBox) component).addItem("CSTDMA");						((JComboBox) component).setBorder(new EmptyBorder(0, 3, 0, 3));						((JComboBox) component).setSelectedItem(atonMessageBroadcastRate.getAccessScheme().toString());						((JComboBox) component).addActionListener(this);							initialChannelBComponents.add(component);								JTextField messageIDTextField = new JTextField(atonMessageBroadcastRate.getMessageID().toString(), 8);						messageIDTextField.getDocument().addDocumentListener(this);						initialChannelBComponents.add(messageIDTextField);									JTextField utcHourTextField = new JTextField(atonMessageBroadcastRate.getUTCHour().toString(), 8);						utcHourTextField.getDocument().addDocumentListener(this);						initialChannelBComponents.add(utcHourTextField);									JTextField utcMinuteTextField = new JTextField(atonMessageBroadcastRate.getUTCMinute().toString(), 8);						utcMinuteTextField.getDocument().addDocumentListener(this);						initialChannelBComponents.add(utcMinuteTextField);						JTextField startslotTextField = new JTextField(atonMessageBroadcastRate.getStartslot().toString(), 8);						startslotTextField.getDocument().addDocumentListener(this);						initialChannelBComponents.add(startslotTextField);									JTextField blockSizeTextField = new JTextField(atonMessageBroadcastRate.getBlockSize().toString(), 8);						blockSizeTextField.getDocument().addDocumentListener(this);						initialChannelBComponents.add(blockSizeTextField);						JTextField incrementTextField = new JTextField(atonMessageBroadcastRate.getIncrement().toString(), 8);						incrementTextField.getDocument().addDocumentListener(this);						initialChannelBComponents.add(incrementTextField);							JTextField usageTextField = new JTextField(atonMessageBroadcastRate.getUsage(), 8);						usageTextField.getDocument().addDocumentListener(this);						initialChannelBComponents.add(usageTextField);												Component component2 = new JButton("Clear");							((JButton) component2).setMargin(new Insets(0, 3, 0, 3));						((JButton) component2).addActionListener(this);						initialChannelBComponents.add(component2);					}					updateChannelComboBoxesAndScrollPanes(null, initialChannelBComponents, false, false, false, true, false, false);											ignoreListeners = true;									}			} else {				channelBComboBox.setSelectedItem("NULL");			}			if ((((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL) &&					(tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) ||					tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL))) ||					tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) ||					tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_FROM_LABEL)) {				configureDisabledComboBox(channelAComboBox);				if (channelAPanel != null) {					for (Component component : channelAPanel.getComponents()) {						if (component instanceof JComboBox) {							configureDisabledComboBox((JComboBox) component);						} else if (component instanceof JTextField) {							((JTextField) component).setEnabled(false);							configureDisabledTextField((JTextField) component);							} else if (component instanceof JButton) {							((JButton) component).setVisible(false);						}					}				}				configureDisabledComboBox(channelBComboBox);				if (channelBPanel != null) {					for (Component component : channelBPanel.getComponents()) {						if (component instanceof JComboBox) {							configureDisabledComboBox((JComboBox) component);						} else if (component instanceof JTextField) {							((JTextField) component).setEnabled(false);							configureDisabledTextField((JTextField) component);										} else if (component instanceof JButton) {							((JButton) component).setVisible(false);						}					}							}								} else if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL) ||					tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.SIMULATED_LABEL) ||					tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_TO_LABEL)) {				channelAComboBox.setEnabled(true);				channelAComboBox.setEditable(false); 				if (channelAPanel != null) {					for (Component component : channelAPanel.getComponents()) {						if (component instanceof JComboBox) {							((JComboBox) component).setEnabled(true);							((JComboBox) component).setEditable(false); 						} else if (component instanceof JTextField) {							((JTextField) component).setEnabled(true);											} else if (component instanceof JButton) {							((JButton) component).setVisible(true);						}					}				}				channelBComboBox.setEnabled(true);					channelBComboBox.setEditable(false);				if (channelBPanel != null) {									for (Component component : channelBPanel.getComponents()) {						if (component instanceof JComboBox) {							((JComboBox) component).setEnabled(true);							((JComboBox) component).setEditable(false); 													} else if (component instanceof JTextField) {							((JTextField) component).setEnabled(true);											} else if (component instanceof JButton) {							((JButton) component).setVisible(true);						}					}					}								}			            if (selectedStationData.getDescription() != null) {                additionalInformationJTextArea.setText(selectedStationData.getDescription());            } else {                additionalInformationJTextArea.setText("");            }            updateAntennaTypeComboBox();        }                ignoreListeners = false;                return containerPane;        }	private void clearChannelRow(String channel, int clearRowButtonIndex) {					ignoreListeners = true;								if (stationTypeComboBox.getSelectedIndex() == 0 || stationTypeComboBox.getSelectedIndex() == 1) {  // base station or repeater			for (int i=clearRowButtonIndex; i>clearRowButtonIndex-6; i--) {				if (channel.equals("A")) {					Component component = channelAPanel.getComponent(i);					if (component instanceof JTextField) {						((JTextField) component).setText("");					} else if (component instanceof JComboBox) {						((JComboBox) component).setSelectedIndex(0);					}				} else if (channel.equals("B")) {					Component component = channelBPanel.getComponent(i);					if (component instanceof JTextField) {						((JTextField) component).setText("");					} else if (component instanceof JComboBox) {						((JComboBox) component).setSelectedIndex(0);					}				}			}		} else if (stationTypeComboBox.getSelectedIndex() == 3) {  // aton station			for (int i=clearRowButtonIndex; i>clearRowButtonIndex-9; i--) {				if (channel.equals("A")) {					Component component = channelAPanel.getComponent(i);					if (component instanceof JTextField) {						((JTextField) component).setText("");					} else if (component instanceof JComboBox) {						((JComboBox) component).setSelectedIndex(0);					}				} else if (channel.equals("B")) {					Component component = channelBPanel.getComponent(i);					if (component instanceof JTextField) {						((JTextField) component).setText("");					} else if (component instanceof JComboBox) {						((JComboBox) component).setSelectedIndex(0);					}				}			}		}		updateChannelComboBoxesAndScrollPanes(null, null, false, false, false, false, false, false);				ignoreListeners = false;	}			/*	private void deleteChannelRow(String channel, int deleteRowButtonIndex) {					ignoreListeners = true;								if (stationTypeComboBox.getSelectedIndex() == 0 || stationTypeComboBox.getSelectedIndex() == 1) {  // base station or repeater			for (int i=deleteRowButtonIndex; i>deleteRowButtonIndex-5; i--) {				if (channel.equals("A")) {					channelAPanel.remove(i);				} else if (channel.equals("B")) {					channelBPanel.remove(i);				}			}		} else if (stationTypeComboBox.getSelectedIndex() == 3) {  // aton station			for (int i=deleteRowButtonIndex; i>deleteRowButtonIndex-8; i--) {				if (channel.equals("A")) {					channelAPanel.remove(i);				} else if (channel.equals("B")) {					channelBPanel.remove(i);				}			}		}		updateChannelComboBoxesAndScrollPanes(null, null, false, false, false, false);				ignoreListeners = false;	}	*/		private void updateChannelComboBoxesAndScrollPanes(List<Component> initialChannelAComponents, List<Component> initialChannelBComponents, boolean clearChannelA, boolean clearChannelB, boolean initChannelA, boolean initChannelB, boolean addRowToChannelA, boolean addRowToChannelB) {			ignoreListeners = true;			GridBagConstraints c = new GridBagConstraints();			Component[] channelAComponents = new Component[0];				if (channelAPanel != null) {			if (!clearChannelA) {				channelAComponents = channelAPanel.getComponents();					}			channelAPanel.removeAll();		}				Component[] channelBComponents = new Component[0];					if (channelBPanel != null) {			if (!clearChannelB) {				channelBComponents = channelBPanel.getComponents();							}			channelBPanel.removeAll();			}				if (fatdmaPanel != null) {			fatdmaPanel.removeAll();				}		boolean addDefaultFATDMASchemeButton = true;		if ((((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL) &&				(tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) ||				tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL))) ||				tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) ||				tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_FROM_LABEL)) {				addDefaultFATDMASchemeButton = false;		}				if (stationTypeComboBox.getSelectedIndex() == 2) {  // receiver						// receivers don't have any FATDMA information					} else if (stationTypeComboBox.getSelectedIndex() == 0 || stationTypeComboBox.getSelectedIndex() == 1) {  // base station or repeater	            c = updateGBC(c, 0, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));            fatdmaPanel.add(new JLabel("Channel A:"), c);            c = updateGBC(c, 1, 0, 1, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                                fatdmaPanel.add(channelAComboBox, c);			if (addDefaultFATDMASchemeButton) {				c = updateGBC(c, 2, 0, 0.5, GridBagConstraints.LINE_END, GridBagConstraints.NONE, new Insets(5,5,5,5));                    				fatdmaPanel.add(chooseDefaultFATDMASchemeButton, c);						}							if (!((String) channelAComboBox.getSelectedItem()).equals("NULL")) {							JPanel channelATitlePanel = getChannelTitlePanelForBaseStationOrRepeater();				channelAPanel = getChannelPanelForBaseStationOrRepeater(initialChannelAComponents, channelAComponents, initChannelA, addRowToChannelA);								channelAScrollPane = new JScrollPane(channelAPanel);				channelAScrollPane.setBorder(new EmptyBorder(3, 3, 3, 3));				channelAScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);				channelAScrollPane.setPreferredSize(new Dimension(630, 100));				channelAScrollPane.setMaximumSize(new Dimension(630, 100));				channelAScrollPane.setMinimumSize(new Dimension(630, 100));									JPanel containerPanel = new JPanel(new GridBagLayout());				containerPanel.setBorder(BorderFactory.createLineBorder(new Color(184, 207, 229)));				c = updateGBC(c, 0, 0, 1, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(0,0,0,0));  				containerPanel.add(channelATitlePanel, c);				c = updateGBC(c, 0, 1, 1, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(0,0,0,0));  				containerPanel.add(channelAScrollPane, c);												c = updateGBC(c, 0, 1, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));   								if (addDefaultFATDMASchemeButton) {					c.gridwidth = 3;				} else {					c.gridwidth = 2;				}				fatdmaPanel.add(containerPanel, c);				c.gridwidth = 1;			}			c = updateGBC(c, 0, 2, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));            fatdmaPanel.add(new JLabel("Channel B:"), c);            c = updateGBC(c, 1, 2, 1, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                                fatdmaPanel.add(channelBComboBox, c);				if (addDefaultFATDMASchemeButton) {				c = updateGBC(c, 2, 2, 0.5, GridBagConstraints.LINE_END, GridBagConstraints.NONE, new Insets(5,5,5,5));                    				fatdmaPanel.add(new JLabel(""), c);							}						if (!((String) channelBComboBox.getSelectedItem()).equals("NULL")) {				JPanel channelBTitlePanel = getChannelTitlePanelForBaseStationOrRepeater();				channelBPanel = getChannelPanelForBaseStationOrRepeater(initialChannelBComponents, channelBComponents, initChannelB, addRowToChannelB);								channelBScrollPane = new JScrollPane(channelBPanel);				channelBScrollPane.setBorder(new EmptyBorder(3, 3, 3, 3));				channelBScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);				channelBScrollPane.setPreferredSize(new Dimension(630, 100));				channelBScrollPane.setMaximumSize(new Dimension(630, 100));				channelBScrollPane.setMinimumSize(new Dimension(630, 100));									JPanel containerPanel = new JPanel(new GridBagLayout());				containerPanel.setBorder(BorderFactory.createLineBorder(new Color(184, 207, 229)));				c = updateGBC(c, 0, 0, 1, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(0,0,0,0));  				containerPanel.add(channelBTitlePanel, c);				c = updateGBC(c, 0, 1, 1, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(0,0,0,0));  				containerPanel.add(channelBScrollPane, c);												c = updateGBC(c, 0, 3, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));   								if (addDefaultFATDMASchemeButton) {					c.gridwidth = 3;				} else {					c.gridwidth = 2;				}				fatdmaPanel.add(containerPanel, c);				c.gridwidth = 1;			}					} else if (stationTypeComboBox.getSelectedIndex() == 3) {  // aton station            c = updateGBC(c, 0, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));            fatdmaPanel.add(new JLabel("Channel A:"), c);            c = updateGBC(c, 1, 0, 1, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                                fatdmaPanel.add(channelAComboBox, c);			if (addDefaultFATDMASchemeButton) {				c = updateGBC(c, 2, 0, 0.5, GridBagConstraints.LINE_END, GridBagConstraints.NONE, new Insets(5,5,5,5));                    				fatdmaPanel.add(chooseDefaultFATDMASchemeButton, c);						}			if (!((String) channelAComboBox.getSelectedItem()).equals("NULL")) {				JPanel channelATitlePanel = getChannelTitlePanelForAtonStation();				channelAPanel = getChannelPanelForAtonStation(initialChannelAComponents, channelAComponents, initChannelA, addRowToChannelA);								channelAScrollPane = new JScrollPane(channelAPanel);				channelAScrollPane.setBorder(new EmptyBorder(3, 3, 3, 3));				channelAScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);				channelAScrollPane.setPreferredSize(new Dimension(930, 100));				channelAScrollPane.setMaximumSize(new Dimension(930, 100));				channelAScrollPane.setMinimumSize(new Dimension(930, 100));									JPanel containerPanel = new JPanel(new GridBagLayout());				containerPanel.setBorder(BorderFactory.createLineBorder(new Color(184, 207, 229)));				c = updateGBC(c, 0, 0, 1, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(0,0,0,0));  				containerPanel.add(channelATitlePanel, c);				c = updateGBC(c, 0, 1, 1, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(0,0,0,0));  				containerPanel.add(channelAScrollPane, c);												c = updateGBC(c, 0, 1, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));   								if (addDefaultFATDMASchemeButton) {					c.gridwidth = 3;				} else {					c.gridwidth = 2;				}				fatdmaPanel.add(containerPanel, c);				c.gridwidth = 1;				}			c = updateGBC(c, 0, 2, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));            fatdmaPanel.add(new JLabel("Channel B:"), c);            c = updateGBC(c, 1, 2, 1, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));                                fatdmaPanel.add(channelBComboBox, c);			if (addDefaultFATDMASchemeButton) {							c = updateGBC(c, 2, 2, 0.5, GridBagConstraints.LINE_END, GridBagConstraints.NONE, new Insets(5,5,5,5));                    				fatdmaPanel.add(new JLabel(""), c);							}						if (!((String) channelBComboBox.getSelectedItem()).equals("NULL")) {		 				JPanel channelBTitlePanel = getChannelTitlePanelForAtonStation();				channelBPanel = getChannelPanelForAtonStation(initialChannelBComponents, channelBComponents, initChannelB, addRowToChannelB);								channelBScrollPane = new JScrollPane(channelBPanel);				channelBScrollPane.setBorder(new EmptyBorder(3, 3, 3, 3));				channelBScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);				channelBScrollPane.setPreferredSize(new Dimension(930, 100));				channelBScrollPane.setMaximumSize(new Dimension(930, 100));				channelBScrollPane.setMinimumSize(new Dimension(930, 100));									JPanel containerPanel = new JPanel(new GridBagLayout());				containerPanel.setBorder(BorderFactory.createLineBorder(new Color(184, 207, 229)));				c = updateGBC(c, 0, 0, 1, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(0,0,0,0));  				containerPanel.add(channelBTitlePanel, c);				c = updateGBC(c, 0, 1, 1, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(0,0,0,0));  				containerPanel.add(channelBScrollPane, c);												c = updateGBC(c, 0, 3, 0.5, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(5,5,5,5));   								if (addDefaultFATDMASchemeButton) {					c.gridwidth = 3;				} else {					c.gridwidth = 2;				}				fatdmaPanel.add(containerPanel, c);				c.gridwidth = 1;			}				}				fatdmaPanel.repaint();		fatdmaPanel.validate();						if (dialog != null) {			int w = dialog.getSize().width;			int h = dialog.getSize().height;			dialog.pack();					dialog.setSize(w, h);			dialog.validate();		}				// scrolls to bottom		if (addRowToChannelA) {			channelAScrollPane.getViewport().setViewPosition(new Point(0, 10000));		}		if (addRowToChannelB) {			channelBScrollPane.getViewport().setViewPosition(new Point(0, 10000));		}				ignoreListeners = false;	}			private JPanel getChannelTitlePanelForBaseStationOrRepeater() {		int[] insetsValues = new int[5];						if ((((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL) &&				(tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) ||				tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL))) ||				tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) ||				tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_FROM_LABEL)) {					insetsValues[0] = 37;			insetsValues[1] = 54;			insetsValues[2] = 48;			insetsValues[3] = 70;			insetsValues[4] = 78;		} else {			insetsValues[0] = 33;			insetsValues[1] = 50;			insetsValues[2] = 45;			insetsValues[3] = 37;			insetsValues[4] = 48;		}		JPanel channelTitlePanel = new JPanel(new GridBagLayout());		GridBagConstraints c = new GridBagConstraints();					c = updateGBC(c, 0, 0, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,insetsValues[0],5,5));					JLabel startSlotLabel = new JLabel("<html><u>Startslot</u></html>");		startSlotLabel.setToolTipText("FATDMA_startslot (0..2249)");		channelTitlePanel.add(startSlotLabel, c);					c = updateGBC(c, 1, 0, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,insetsValues[1],5,5));					JLabel blockSizeLabel = new JLabel("<html><u>Block size</u></html>");		blockSizeLabel.setToolTipText("FATDMA_block_size (1..5)");						channelTitlePanel.add(blockSizeLabel, c);			c = updateGBC(c, 2, 0, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,insetsValues[2],5,5));					JLabel incrementLabel = new JLabel("<html><u>Increment</u></html>");		incrementLabel.setToolTipText("FATDMA_increment (0..1125, recommended values 0,2,3,5,6,9,10,15,18,25,30,45,50,75,90,125,225,250,375,450,750,1125)");				channelTitlePanel.add(incrementLabel, c);			c = updateGBC(c, 3, 0, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,insetsValues[3],5,5));					JLabel ownershipLabel = new JLabel("<html><u>Ownership</u></html>");		ownershipLabel.setToolTipText("FATDMA_ownership (L: use by local station, R: use by remote station)");		channelTitlePanel.add(ownershipLabel, c);		c = updateGBC(c, 4, 0, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,insetsValues[4],5,5));						JLabel usageLabel = new JLabel("<html><u>Usage</u></html>");		channelTitlePanel.add(usageLabel, c);				c = updateGBC(c, 5, 0, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,5,5,5));					channelTitlePanel.add(new JLabel(""), c);			return channelTitlePanel;	}				private JPanel getChannelPanelForBaseStationOrRepeater(List<Component> initialComponents, Component[] previousChannelComponents, boolean init, boolean addRowToChannel) {			JPanel channelPanel = new JPanel(new GridBagLayout());		GridBagConstraints c = new GridBagConstraints();						if (initialComponents != null) {			for (int i=0; i<initialComponents.size(); i++) {				Component component = initialComponents.get(i);				if (component instanceof JButton) {					c = updateGBC(c, i%6, (channelPanel.getComponents().length)/6, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(5,5,5,5));				} else {					c = updateGBC(c, i%6, (channelPanel.getComponents().length)/6, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,5,5,5));										}				if (component instanceof JTextField) {					((JTextField) component).setCaretPosition(0);				}								channelPanel.add(component, c);			}		}															for (int i=0; i<previousChannelComponents.length-1; i++) {			if (previousChannelComponents[i] instanceof JButton) {				c = updateGBC(c, i%6, (channelPanel.getComponents().length)/6, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(5,5,5,5));			} else {				c = updateGBC(c, i%6, (channelPanel.getComponents().length)/6, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,5,5,5));									}			if (previousChannelComponents[i] instanceof JTextField) {				((JTextField) previousChannelComponents[i]).setCaretPosition(0);			}						channelPanel.add(previousChannelComponents[i], c);		}				int addNoOfRows = 0;		if (init) {			addNoOfRows = 3-(channelPanel.getComponents().length/6);			if (addNoOfRows < 0) {				addNoOfRows = 0;			}		}		if (addRowToChannel) {			addNoOfRows++;		}		for (int i=0; i<addNoOfRows; i++) {			for (int cols=0; cols<6; cols++) {										JComponent component = null;										if (cols < 3) {					component = new JTextField(8);									c = updateGBC(c, cols, (channelPanel.getComponents().length)/6, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,5,5,5));					} else if (cols == 3) {					component = new JComboBox();														((JComboBox) component).addItem("Local");					((JComboBox) component).addItem("Remote");					((JComboBox) component).setBorder(new EmptyBorder(0, 3, 0, 3));					c = updateGBC(c, cols, (channelPanel.getComponents().length)/6, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,5,5,5));									} else if (cols == 4) {					component = new JTextField(8);									c = updateGBC(c, cols, (channelPanel.getComponents().length)/6, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,5,5,5));				} else if (cols == 5) {					component = new JButton("Clear");						((JButton) component).setMargin(new Insets(0, 3, 0, 3));					((JButton) component).addActionListener(this);					c = updateGBC(c, cols, (channelPanel.getComponents().length)/6, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(5,5,5,5));				}						channelPanel.add(component, c);									}		}						JButton button = new JButton("Add row");		button.addActionListener(this);						button.setMargin(new Insets(0, 3, 0, 3));		c = updateGBC(c, 5, (channelPanel.getComponents().length)/6, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(5,5,5,5));					channelPanel.add(button, c);					return channelPanel;	}		private JPanel getChannelTitlePanelForAtonStation() {			int[] insetsValues = new int[8];						if ((((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL) &&				(tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) ||				tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL))) ||				tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) ||				tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_FROM_LABEL)) {					insetsValues[0] = 32;			insetsValues[1] = 46;			insetsValues[2] = 42;			insetsValues[3] = 46;			insetsValues[4] = 46;			insetsValues[5] = 49;			insetsValues[6] = 44;					insetsValues[7] = 56;		} else {			insetsValues[0] = 4;			insetsValues[1] = 18;			insetsValues[2] = 40;			insetsValues[3] = 42;			insetsValues[4] = 42;			insetsValues[5] = 47;			insetsValues[6] = 43;				insetsValues[7] = 51;		}				JPanel channelTitlePanel = new JPanel(new GridBagLayout());		GridBagConstraints c = new GridBagConstraints();				c = updateGBC(c, 0, 0, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,insetsValues[0],1,5));					JLabel accessSchemeLabel = new JLabel("<html><u>Access Scheme</u></html>");		accessSchemeLabel.setToolTipText("Access_scheme (FATDMA, RATDMA, CSTDMA)");		channelTitlePanel.add(accessSchemeLabel, c);		c = updateGBC(c, 1, 0, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,insetsValues[1],1,5));					JLabel messageIDLabel = new JLabel("<html><u>Message ID</u></html>");		messageIDLabel.setToolTipText("Message_ID (0..64) (Identifies which message type this transmission relates to)");		channelTitlePanel.add(messageIDLabel, c);		c = updateGBC(c, 2, 0, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,insetsValues[2],1,5));					JLabel utcHourLabel = new JLabel("<html><u>UTC Hour</u></html>");		utcHourLabel.setToolTipText("UTC_Hour (0-23; 24 = UTC hour not available) (UTC hour of first transmission of the day)");		channelTitlePanel.add(utcHourLabel, c);			c = updateGBC(c, 3, 0, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,insetsValues[3],1,5));			JLabel utcMinuteLabel = new JLabel("<html><u>UTC Minute</u></html>");		utcMinuteLabel.setToolTipText("UTC_Minute (0-59; 60 = UTC minute not available) (UTC minute of first transmission of the day)");		channelTitlePanel.add(utcMinuteLabel, c);				c = updateGBC(c, 4, 0, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,insetsValues[4],1,5));					JLabel startslotLabel = new JLabel("<html><u>Startslot</u></html>");		startslotLabel.setToolTipText("startslot (0-2249; 4095 = discontinue broadcast) (Only relevant for FATDMA)");		channelTitlePanel.add(startslotLabel, c);		c = updateGBC(c, 5, 0, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,insetsValues[5],1,5));					JLabel blockSizeLabel = new JLabel("<html><u>Block size</u></html>");		blockSizeLabel.setToolTipText("block_size (1..5)");		channelTitlePanel.add(blockSizeLabel, c);									c = updateGBC(c, 6, 0, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,insetsValues[6],1,5));					JLabel incrementLabel = new JLabel("<html><u>Increment</u></html>");		incrementLabel.setToolTipText("increment (0..324000), (No. of slots in FATDMA, no. of seconds in RATDMA/CSTDMA)");		channelTitlePanel.add(incrementLabel, c);			c = updateGBC(c, 7, 0, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,insetsValues[7],1,5));					JLabel usageLabel = new JLabel("<html><u>Usage</u></html>");		channelTitlePanel.add(usageLabel, c);					c = updateGBC(c, 7, 0, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,5,1,5));					channelTitlePanel.add(new JLabel(""), c);			return channelTitlePanel;	}		private JPanel getChannelPanelForAtonStation(List<Component> initialComponents, Component[] previousChannelComponents, boolean init, boolean addRowToChannel) {			JPanel channelPanel = new JPanel(new GridBagLayout());		GridBagConstraints c = new GridBagConstraints();		if (initialComponents != null) {			for (int i=0; i<initialComponents.size(); i++) {				Component component = initialComponents.get(i);						if (component instanceof JButton) {					c = updateGBC(c, i%9, (channelPanel.getComponents().length)/9, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(5,5,5,5));				} else {					c = updateGBC(c, i%9, (channelPanel.getComponents().length)/9, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,5,5,5));										}				if (component instanceof JTextField) {					((JTextField) component).setCaretPosition(0);				}								channelPanel.add(component, c);			}		}						for (int i=0; i<previousChannelComponents.length-1; i++) {			if (previousChannelComponents[i] instanceof JButton) {				c = updateGBC(c, i%9, (channelPanel.getComponents().length)/9, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(5,5,5,5));									} else {				c = updateGBC(c, i%9, (channelPanel.getComponents().length)/9, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,5,5,5));			}			if (previousChannelComponents[i] instanceof JTextField) {				((JTextField) previousChannelComponents[i]).setCaretPosition(0);			}							channelPanel.add(previousChannelComponents[i], c);		}				int addNoOfRows = 0;		if (init) {			addNoOfRows = 3-(channelPanel.getComponents().length/9);			if (addNoOfRows < 0) {				addNoOfRows = 0;			}		}		if (addRowToChannel) {			addNoOfRows++;		}				for (int i=0; i<addNoOfRows; i++) {			for (int cols=0; cols<9; cols++) {										JComponent component = null;				if  (cols == 0) {					component = new JComboBox();														((JComboBox) component).addItem("FATDMA");					((JComboBox) component).addItem("RATDMA");					((JComboBox) component).addItem("CSTDMA");					((JComboBox) component).setBorder(new EmptyBorder(0, 3, 0, 3));					c = updateGBC(c, cols, (channelPanel.getComponents().length)/9, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,5,5,5));						} else if (cols > 0 && cols < 8) {					component = new JTextField(8);									c = updateGBC(c, cols, (channelPanel.getComponents().length)/9, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5,5,5,5));				} else if (cols == 8) {					component = new JButton("Clear");						((JButton) component).setMargin(new Insets(0, 3, 0, 3));					((JButton) component).addActionListener(this);					c = updateGBC(c, cols, (channelPanel.getComponents().length)/9, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(5,5,5,5));				}						channelPanel.add(component, c);									}		}										JButton button = new JButton("Add row");		button.addActionListener(this);						button.setMargin(new Insets(0, 3, 0, 3));		c = updateGBC(c, 8, (channelPanel.getComponents().length)/9, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(5,5,5,5));					channelPanel.add(button, c);				return channelPanel;	}    private AISFixedStationData getSelectedStationData(int selectedIndex) {        	if (selectedIndex < 0) {			return null;		}    	        AISFixedStationData selectedStationData = null;            if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.OWN_ACTIVE_STATIONS_LABEL)) {            if (data != null && data.getActiveStations() != null && selectedIndex < data.getActiveStations().size()) {                ActiveStation as = data.getActiveStations().get(selectedIndex);                if (as.getStations() != null) {                    if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) ||                            tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL)) {                        for (AISFixedStationData stationData : as.getStations()) {                            if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) && stationData.getStatus().getStatusID() == DerbyDBInterface.STATUS_ACTIVE) {                                selectedStationData = stationData;                                break;                            } else if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL) && stationData.getStatus().getStatusID() == DerbyDBInterface.STATUS_PLANNED) {                                selectedStationData = stationData;                                break;                            }                        }                    } else if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_FROM_LABEL)) {                                                Map<EAVDAMUser, AISFixedStationData> proposals = as.getProposals();                                                String temp = StationInformationMenuItem.PROPOSAL_FROM_LABEL + " ";                        String organizationName = tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).substring(temp.length());                        for (Object key : proposals.keySet()) {                             EAVDAMUser user = (EAVDAMUser) key;                            if (user.getOrganizationName().equals(organizationName)) {                                selectedStationData = proposals.get(user);                            }                        }                    }                }            }               } else if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.SIMULATION_LABEL)) {            if (data != null && data.getSimulatedStations() != null) {                                for (Simulation s : data.getSimulatedStations()) {                    if (((String) selectDatasetComboBox.getSelectedItem()).endsWith(s.getName())) {                        List<AISFixedStationData> stations = s.getStations();                        if (stations != null && selectedIndex < stations.size()) {                            selectedStationData = stations.get(selectedIndex);                        }                    }                }            }                    } else if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL)) {                if (data != null && data.getOtherUsersStations() != null) {                                for (OtherUserStations ous : data.getOtherUsersStations()) {                    if (((String) selectDatasetComboBox.getSelectedItem()).endsWith(ous.getUser().getOrganizationName())) {                        List<ActiveStation> stations = ous.getStations();                        if (stations != null && selectedIndex < stations.size()) {                            ActiveStation as = stations.get(selectedIndex);                            if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) ||                                    tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL)) {                                if (as.getStations() != null) {                                    for (AISFixedStationData stationData : as.getStations()) {                                        if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) &&                                                stationData.getStatus().getStatusID() == DerbyDBInterface.STATUS_ACTIVE) {                                           selectedStationData = stationData;                                            break;                                        } else if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL) &&                                                stationData.getStatus().getStatusID() == DerbyDBInterface.STATUS_PLANNED) {                                            selectedStationData = stationData;                                            break;                                        }                                    }                                }                            } else if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PROPOSAL_TO_LABEL)) {                                if (as.getProposals() != null && as.getProposals().size() ==1) {                                    for (Object key : as.getProposals().keySet()) {                                         EAVDAMUser temp = (EAVDAMUser) key;                                        selectedStationData = as.getProposals().get(temp);                                    }                                }                                                  }                        }                    }                }            }        }                return selectedStationData;        }    public static void configureDisabledTextField(JTextField textField) {        Color bgColor = UIManager.getColor("TextField.background");          textField.setBackground(bgColor);          Color fgColor = UIManager.getColor("TextField.foreground");          textField.setDisabledTextColor(fgColor);    }        public static void configureDisabledComboBox(JComboBox comboBox) {        comboBox.setEditable(true);        ComboBoxEditor editor = comboBox.getEditor();        JTextField temp = (JTextField) editor.getEditorComponent();        temp.setDisabledTextColor(UIManager.getColor("ComboBox.foreground"));        temp.setBackground(UIManager.getColor("ComboBox.background"));        comboBox.setEnabled(false);    }            public static  void configureDisabledTextArea(JTextArea textArea) {        Color bgColor = UIManager.getColor("TextArea.background");          textArea.setBackground(bgColor);          Color fgColor = UIManager.getColor("TextArea.foreground");          textArea.setDisabledTextColor(fgColor);    }		public void windowActivated(WindowEvent e) {}	public void	windowClosed(WindowEvent e) {		dialog = null;	}	public void	windowClosing(WindowEvent e) {		dialog = null;	}	public void	windowDeactivated(WindowEvent e) {} 	public void	windowDeiconified(WindowEvent e) {}	public void windowIconified(WindowEvent e) {}	public void	windowOpened(WindowEvent e) {}          public void stateChanged(ChangeEvent evt) {        if (ignoreListeners) {            return;        }        updateTabbedPane();    }        private void updateTabbedPane() {        tabbedPane.setComponentAt(tabbedPane.getSelectedIndex(), makeStationPanel());    }        private void updateAntennaTypeComboBox() {        if (antennaTypeComboBox.getSelectedIndex() == 0) {  // no antenna                     antennaHeightTextField.setText("");            antennaHeightTextField.setEnabled(false);            terrainHeightTextField.setText("");            terrainHeightTextField.setEnabled(false);            headingTextField.setText("");            headingTextField.setEnabled(false);            fieldOfViewAngleTextField.setText("");            fieldOfViewAngleTextField.setEnabled(false);            gainTextField.setText("");            gainTextField.setEnabled(false);         } else if (antennaTypeComboBox.getSelectedIndex() == 1) {  // omnidirectional			if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL) ||					tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.SIMULATED_LABEL) ||					tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_TO_LABEL)) {  				antennaHeightTextField.setEnabled(true);				terrainHeightTextField.setEnabled(true);			} else if ((((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL) &&					(tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) ||					tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL))) ||					tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) ||					tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_FROM_LABEL)) {				antennaHeightTextField.setEnabled(false);				terrainHeightTextField.setEnabled(false);			}			headingTextField.setText("");            headingTextField.setEnabled(false);            fieldOfViewAngleTextField.setText("");            fieldOfViewAngleTextField.setEnabled(false);            gainTextField.setText("");            gainTextField.setEnabled(false);         } else if (antennaTypeComboBox.getSelectedIndex() == 2) {  // directional			if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL) ||					tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.SIMULATED_LABEL) ||					tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_TO_LABEL)) {  				antennaHeightTextField.setEnabled(true);				terrainHeightTextField.setEnabled(true);			} else if ((((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL) &&					(tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) ||					tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL))) ||					tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) ||					tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_FROM_LABEL)) {				antennaHeightTextField.setEnabled(false);				terrainHeightTextField.setEnabled(false);			}            headingTextField.setEnabled(true);            fieldOfViewAngleTextField.setEnabled(true);            gainTextField.setEnabled(true);         }     }    private boolean addSimulation(String simulationName) {                if (data == null) {            data = new EAVDAMData();                }                List<Simulation> simulatedStations = data.getSimulatedStations();        if (simulatedStations != null) {            for (Simulation s : simulatedStations) {                if (s.getName().equals(simulationName)) {                    JOptionPane.showMessageDialog(dialog, "A simulation with the given name already exists. " +                        "Please, select another name for the simulation.");                    return false;                }            }        }                Simulation simulation = new Simulation();        simulation.setName(simulationName);        simulatedStations.add(simulation);        data.setSimulatedStations(simulatedStations);        DBHandler.saveData(data);                return true;    }        private void deleteSimulation(String simulationName) {                if (data == null || data.getSimulatedStations() == null) {            return;        }                List<Simulation> simulatedStations = data.getSimulatedStations();        for (int i=0; i<simulatedStations.size(); i++) {            Simulation s = simulatedStations.get(i);            if (s.getName().equals(simulationName)) {                simulatedStations.remove(i);                break;            }                    }                data.setSimulatedStations(simulatedStations);        DBHandler.deleteSimulation(simulationName);    }    /**      * Updates select station ComboBox.     *     * @param stationIndex Index of the station to be selected     */        private void updateSelectStationComboBox(int selectedIndex) {                ignoreListeners = true;                selectStationComboBox.removeAllItems();                if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.OWN_ACTIVE_STATIONS_LABEL)) {            if (data != null && data.getActiveStations() != null) {                if (initiallySelectedStationName != null) {                    for (int i=0; i<data.getActiveStations().size(); i++) {                        ActiveStation as = data.getActiveStations().get(i);                        if (as.getStations() != null) {							boolean activeFound = false;							for (AISFixedStationData stationData : as.getStations()) {                        								if (stationData.getStatus().getStatusID() == DerbyDBInterface.STATUS_ACTIVE &&                                        initiallySelectedStationName.equals(stationData.getStationName())) {                                    selectedIndex = i;									activeFound = true;								                                    break;    								}																}							if (!activeFound) {								for (AISFixedStationData stationData : as.getStations()) {                        									if (stationData.getStatus().getStatusID() == DerbyDBInterface.STATUS_PLANNED &&											initiallySelectedStationName.equals(stationData.getStationName())) {										selectedIndex = i;										activeFound = true;																		break;									}								}							}                        }                    }                }                                for (int i=0; i< data.getActiveStations().size(); i++) {                    ActiveStation as = data.getActiveStations().get(i);                    if (as.getStations() != null) {						boolean activeFound = false;						for (AISFixedStationData stationData : as.getStations()) {                                 if (stationData.getStatus().getStatusID() == DerbyDBInterface.STATUS_ACTIVE) {                                selectStationComboBox.addItem(stationData.getStationName());                                if (selectedIndex == i) {                                    selectStationComboBox.setSelectedIndex(i);                                }								activeFound = true;								                            }                        }						if (!activeFound) {							for (AISFixedStationData stationData : as.getStations()) {                        								if (stationData.getStatus().getStatusID() == DerbyDBInterface.STATUS_PLANNED) {									selectStationComboBox.addItem(stationData.getStationName());									if (selectedIndex == i) {										selectStationComboBox.setSelectedIndex(i);									}										}							}														}						                    }                }                            }                        } else if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.SIMULATION_LABEL)) {            if (data != null && data.getSimulatedStations() != null) {                                if (initiallySelectedStationName != null) {                    for (Simulation s : data.getSimulatedStations()) {                        if (((String) selectDatasetComboBox.getSelectedItem()).endsWith(s.getName())) {                            List<AISFixedStationData> stations = s.getStations();                            if (stations != null) {                                for (int i=0; i<stations.size(); i++) {                                    if (stations.get(i).getStationName().equals(initiallySelectedStationName)) {                                        selectedIndex = i;                                        break;                                    }                                }                                                            }                        }                    }                }                for (Simulation s : data.getSimulatedStations()) {                    if (((String) selectDatasetComboBox.getSelectedItem()).endsWith(s.getName())) {                        List<AISFixedStationData> stations = s.getStations();                        if (stations != null) {                            for (int i=0; i<stations.size(); i++) {                                AISFixedStationData stationData = stations.get(i);                                selectStationComboBox.addItem(stationData.getStationName());                                if (selectedIndex == i) {                                    selectStationComboBox.setSelectedIndex(i);                                }                            }                                                        }                    }                }                            }            } else if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL)) {                if (data != null && data.getOtherUsersStations() != null) {                                if (initiallySelectedStationName != null) {                    for (OtherUserStations ous : data.getOtherUsersStations()) {                        if (((String) selectDatasetComboBox.getSelectedItem()).endsWith(ous.getUser().getOrganizationName())) {                            List<ActiveStation> stations = ous.getStations();                            if (stations != null) {                                for (int i=0; i<stations.size(); i++) {                                    ActiveStation as = stations.get(i);                                     if (as.getStations() != null) {                                        for (AISFixedStationData stationData : as.getStations()) {                                            if (stationData.getStatus().getStatusID() == DerbyDBInterface.STATUS_ACTIVE &&                                                    initiallySelectedStationName.equals(stationData.getStationName())) {                                                selectedIndex = i;                                                break;                                                                                                                                        }                                                           }                                    }                                }                            }                        }                    }                }                for (OtherUserStations ous : data.getOtherUsersStations()) {                    if (((String) selectDatasetComboBox.getSelectedItem()).endsWith(ous.getUser().getOrganizationName())) {                        List<ActiveStation> stations = ous.getStations();                        if (stations != null) {                            for (int i=0; i<stations.size(); i++) {                                ActiveStation as = stations.get(i);                                if (as.getStations() != null) {                                    for (AISFixedStationData stationData : as.getStations()) {                                        if (stationData.getStatus().getStatusID() == DerbyDBInterface.STATUS_ACTIVE) {                                                                                                                                           selectStationComboBox.addItem(stationData.getStationName());                                                                                        if (selectedIndex == i) {                                                selectStationComboBox.setSelectedIndex(i);                                            }                                                                              }                                    }                                }                            }                        }                    }                }                            }        }            ignoreListeners = false;       }        public boolean alreadyExists(int ignoreIndex, String stationName) {                if (data == null) {            return false;        }            if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.OWN_ACTIVE_STATIONS_LABEL)) {                        if (data.getActiveStations() != null) {                for (int i=0; i< data.getActiveStations().size(); i++) {                    if (i != ignoreIndex) {                        ActiveStation as = data.getActiveStations().get(i);                        if (as.getStations() != null && !as.getStations().isEmpty()) {                            AISFixedStationData stationData = as.getStations().get(0);                            if (stationData.getStationName().equals(stationName)) {                                return true;                            }                        }                    }                }            }                           } else if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.SIMULATION_LABEL)) {            if (data.getSimulatedStations() != null) {                for (Simulation s : data.getSimulatedStations()) {                    if (((String) selectDatasetComboBox.getSelectedItem()).endsWith(s.getName())) {                        List<AISFixedStationData> stations = s.getStations();                        if (stations != null) {                            for (int i=0; i<stations.size(); i++) {                                if (i != ignoreIndex) {                                    if (stations.get(i).getStationName().equals(stationName)) {                                        return true;                                    }                                }                            }                                                        }                    }                }            }            } else if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL)) {            if (data.getOtherUsersStations() != null) {                                for (OtherUserStations ous : data.getOtherUsersStations()) {                    if (((String) selectDatasetComboBox.getSelectedItem()).endsWith(ous.getUser().getOrganizationName())) {                        List<ActiveStation> stations = ous.getStations();                        if (stations != null) {                            for (int i=0; i<stations.size(); i++) {                                if (i != ignoreIndex) {                                    ActiveStation as = stations.get(i);                                    if (as.getStations() != null && !as.getStations().isEmpty()) {                                        AISFixedStationData stationData = as.getStations().get(0);                                        if (stationName.equals(stationData.getStationName())) {                                            return true;                                        }                                    }                                }                            }                        }                    }                }            }        }                return false;    }    		private List<FATDMAReservation> getFATDMAScheme(Component[] components, boolean validate) throws NumberFormatException, IllegalArgumentException {		List<FATDMAReservation> fatdmaScheme = new ArrayList<FATDMAReservation>();		int i = 0;		while (i+5 < components.length-1) {			JTextField startslotTextField = (JTextField) components[i];			JTextField blockSizeTextField = (JTextField) components[i+1];			JTextField incrementTextField = (JTextField) components[i+2];			JComboBox ownershipComboBox = (JComboBox) components[i+3];			String ownership = null;			if (ownershipComboBox.getSelectedIndex() == 0) {				ownership = "L";			} else if (ownershipComboBox.getSelectedIndex() == 1) {				ownership = "R";			}						JTextField usageTextField = (JTextField) components[i+4];			if ((startslotTextField.getText().isEmpty() || blockSizeTextField.getText().isEmpty() || incrementTextField.getText().isEmpty() || usageTextField.getText().isEmpty()) &&					!(startslotTextField.getText().isEmpty() && blockSizeTextField.getText().isEmpty() && incrementTextField.getText().isEmpty() && usageTextField.getText().isEmpty())) {				if (validate) {					throw new IllegalArgumentException("Rows exist that do not have all parameters defined.");				}			}			if (!startslotTextField.getText().isEmpty() && !blockSizeTextField.getText().isEmpty() && !incrementTextField.getText().isEmpty() && !usageTextField.getText().isEmpty()) {				FATDMAReservation fatdmaReservation = new FATDMAReservation(new Integer(startslotTextField.getText()),					new Integer(blockSizeTextField.getText()), new Integer(incrementTextField.getText()), ownership, usageTextField.getText());				fatdmaScheme.add(fatdmaReservation);			}									// i+5 is clear button			i = i+6;  // go to next row		}		return fatdmaScheme;	}	private List<AtonMessageBroadcastRate> getAtonMessageBroadcastList(Component[] components, boolean validate) throws NumberFormatException, IllegalArgumentException {		List<AtonMessageBroadcastRate> atonMessageBroadcastList = new ArrayList<AtonMessageBroadcastRate>();		int i = 0;		while (i+7 < components.length-1) {			JComboBox accessSchemeComboBox = (JComboBox) components[i];			JTextField messageIDTextField = (JTextField) components[i+1];			JTextField utcHourTextField = (JTextField) components[i+2];			JTextField utcMinuteTextField = (JTextField) components[i+3];			JTextField startslotTextField = (JTextField) components[i+4];			JTextField blockSizeTextField = (JTextField) components[i+5];			JTextField incrementTextField = (JTextField) components[i+6];						JTextField usageTextField = (JTextField) components[i+7];			if ((messageIDTextField.getText().isEmpty() || utcHourTextField.getText().isEmpty() || utcMinuteTextField.getText().isEmpty() ||					startslotTextField.getText().isEmpty() || blockSizeTextField.getText().isEmpty() || incrementTextField.getText().isEmpty() ||					usageTextField.getText().isEmpty()) &&					!(messageIDTextField.getText().isEmpty() && utcHourTextField.getText().isEmpty() && utcMinuteTextField.getText().isEmpty() &&					startslotTextField.getText().isEmpty() && blockSizeTextField.getText().isEmpty() && incrementTextField.getText().isEmpty() &&					usageTextField.getText().isEmpty())) {				if (validate) {					throw new IllegalArgumentException("Rows exist that do not have all parameters defined.");								}			}							if (!messageIDTextField.getText().isEmpty() && !utcHourTextField.getText().isEmpty() && !utcMinuteTextField.getText().isEmpty() &&					!startslotTextField.getText().isEmpty() && !blockSizeTextField.getText().isEmpty() && !incrementTextField.getText().isEmpty() &&					!usageTextField.getText().isEmpty()) {							AtonMessageBroadcastRate atonMessageBroadcastRate = new AtonMessageBroadcastRate((String) accessSchemeComboBox.getSelectedItem(),									new Integer(messageIDTextField.getText()), new Integer(utcHourTextField.getText()), new Integer(utcMinuteTextField.getText()),					new Integer(startslotTextField.getText()), new Integer(blockSizeTextField.getText()), new Integer(incrementTextField.getText()),					usageTextField.getText());									atonMessageBroadcastList.add(atonMessageBroadcastRate);			}									// i+8 is clear button			i = i+9;  // go to next row		}		return atonMessageBroadcastList;	}	        /**     * Saves station's data.     *     * @param stationIndex  Index of the station in the stations list     * @return  True if the data was saved or false if it was not     */    private boolean saveStation(int stationIndex) {        if (data == null) {            data = new EAVDAMData();        }                if (alreadyExists(stationIndex, stationNameTextField.getText())) {            JOptionPane.showMessageDialog(dialog, "A station with the given name already exists. " +                "Please, select another name for the station.");                             return false;        }        if (latitudeTextField.getText().trim().isEmpty()) {            JOptionPane.showMessageDialog(dialog, "Latitude is mandatory.");            return false;        } else {            if (!latitudeTextField.getText().trim().isEmpty()) {                try {                    Double.parseDouble(latitudeTextField.getText().replace(",", ".").trim());                                    } catch (NumberFormatException ex) {                    JOptionPane.showMessageDialog(dialog, "Latitude is not a valid number.");                    return false;                }            }        }                    if (longitudeTextField.getText().trim().isEmpty()) {                      JOptionPane.showMessageDialog(dialog, "Longitude is mandatory.");                                return false;        } else {                                                                    if (!longitudeTextField.getText().trim().isEmpty()) {                try {                    Double.parseDouble(longitudeTextField.getText().replace(",", ".").trim());                } catch (NumberFormatException ex) {                    JOptionPane.showMessageDialog(dialog, "Longitude is not a valid number.");                    return false;                }            }        }                            try {            if (!transmissionPowerTextField.getText().trim().isEmpty()) {                Double.parseDouble(transmissionPowerTextField.getText().replace(",", ".").trim());            }        } catch (NumberFormatException ex) {            JOptionPane.showMessageDialog(dialog, "Transmission power is not a valid number.");            return false;        }           if (antennaTypeComboBox.getSelectedIndex() == 1 &&                (antennaHeightTextField.getText().trim().isEmpty() ||                terrainHeightTextField.getText().trim().isEmpty())) {            JOptionPane.showMessageDialog(dialog, "Antenna height and terrain height must both be given.");            return false;        }        if (antennaTypeComboBox.getSelectedIndex() == 2 &&                (antennaHeightTextField.getText().trim().isEmpty() ||                terrainHeightTextField.getText().trim().isEmpty() ||                headingTextField.getText().trim().isEmpty() ||                fieldOfViewAngleTextField.getText().trim().isEmpty() ||                gainTextField.getText().trim().isEmpty())) {            JOptionPane.showMessageDialog(dialog, "Antenna height, terrain height, heading, field of view angle and gain must all be given.");            return false;        }        try {            if (!antennaHeightTextField.getText().trim().isEmpty()) {                Double.parseDouble(antennaHeightTextField.getText().replace(",", ".").trim());            }        } catch (NumberFormatException ex) {            JOptionPane.showMessageDialog(dialog, "Antenna height is not a valid number.");                                 return false;        }          try {            if (!terrainHeightTextField.getText().trim().isEmpty()) {                Double.parseDouble(terrainHeightTextField.getText().replace(",", ".").trim());            }        } catch (NumberFormatException ex) {            JOptionPane.showMessageDialog(dialog, "Terrain height is not a valid number.");            return false;                    }                                         try {            if (!headingTextField.getText().trim().isEmpty()) {                Integer.parseInt(headingTextField.getText().trim());            }        } catch (NumberFormatException ex) {            JOptionPane.showMessageDialog(dialog, "Heading is not a valid integer.");            return false;        }          try {            if (!fieldOfViewAngleTextField.getText().trim().isEmpty()) {                Integer.parseInt(fieldOfViewAngleTextField.getText().trim());            }        } catch (NumberFormatException ex) {            JOptionPane.showMessageDialog(dialog, "Field of view angle is not a valid integer.");                                    return false;        }              try {            if (!gainTextField.getText().trim().isEmpty()) {                Double.parseDouble(gainTextField.getText().replace(",", ".").trim());            }        } catch (NumberFormatException ex) {            JOptionPane.showMessageDialog(dialog, "Gain is not a valid number.");            return false;        }                              		FATDMAChannel fatdmaChannelA = null;		FATDMAChannel fatdmaChannelB = null;						if (stationTypeComboBox.getSelectedIndex() == 0 || stationTypeComboBox.getSelectedIndex() == 1) {  // base station or repeater					if (!((String) channelAComboBox.getSelectedItem()).equals("NULL") && channelAPanel != null) { 				Component[] channelAComponents = channelAPanel.getComponents();								if (channelAComponents.length > 1) {									try {						List<FATDMAReservation> fatdmaScheme = getFATDMAScheme(channelAComponents, true);						if (!fatdmaScheme.isEmpty()) {							if (!validateFATDMAScheme(fatdmaScheme)) {								JOptionPane.showMessageDialog(dialog, "Error. The FATDMA values of channel A are overlapping.");								return false;							}							fatdmaChannelA = new AISBaseAndReceiverStationFATDMAChannel((String) channelAComboBox.getSelectedItem(), fatdmaScheme);						}					} catch (NumberFormatException e) {						JOptionPane.showMessageDialog(dialog, "Error. All FATDMA values of channel A are not valid integers.");						return false;					} catch (IllegalArgumentException e) {						JOptionPane.showMessageDialog(dialog, "The following error occurred when validating FATDMA values of channel A:\n" + e.getMessage());              						return false;												}										}			}			if (!((String) channelBComboBox.getSelectedItem()).equals("NULL") && channelBPanel != null) { 							Component[] channelBComponents = channelBPanel.getComponents();								if (channelBComponents.length > 1) {									try {						List<FATDMAReservation> fatdmaScheme = getFATDMAScheme(channelBComponents, true);						if (!fatdmaScheme.isEmpty()) {							if (!validateFATDMAScheme(fatdmaScheme)) {								JOptionPane.showMessageDialog(dialog, "Error. The FATDMA values of channel B are overlapping.");								return false;							}													fatdmaChannelB = new AISBaseAndReceiverStationFATDMAChannel((String) channelBComboBox.getSelectedItem(), fatdmaScheme);						}								} catch (NumberFormatException e) {						JOptionPane.showMessageDialog(dialog, "Error. All FATDMA values of channel B are not valid integers.");						return false;					} catch (IllegalArgumentException e) {						JOptionPane.showMessageDialog(dialog, "The following error occurred when validating FATDMA values of channel B:\n" + e.getMessage());              						return false;												}				}							}				} else if (stationTypeComboBox.getSelectedIndex() == 3) {  // aton station			if (!((String) channelAComboBox.getSelectedItem()).equals("NULL") && channelAPanel != null) { 							Component[] channelAComponents = channelAPanel.getComponents();				if (channelAComponents.length > 1) {									try {						List<AtonMessageBroadcastRate> atonMessageBroadcastList = getAtonMessageBroadcastList(channelAComponents, true);						if (!atonMessageBroadcastList.isEmpty()) {							if (!validateAtonMessageBroadcastList(atonMessageBroadcastList)) {								JOptionPane.showMessageDialog(dialog, "Error. The FATDMA values of channel A are overlapping.");								return false;							}													fatdmaChannelA = new AISAtonStationFATDMAChannel((String) channelAComboBox.getSelectedItem(), atonMessageBroadcastList);											}					} catch (NumberFormatException e) {						JOptionPane.showMessageDialog(dialog, "Error. All FATDMA values of channel A are not valid integers.");						return false;					} catch (IllegalArgumentException e) {						JOptionPane.showMessageDialog(dialog, "The following error occurred when validating FATDMA values of channel A:\n" + e.getMessage());              						return false;												}									}			}			if (!((String) channelBComboBox.getSelectedItem()).equals("NULL") && channelBPanel != null) { 							Component[] channelBComponents = channelBPanel.getComponents();				if (channelBComponents.length > 1) {									try {						List<AtonMessageBroadcastRate> atonMessageBroadcastList = getAtonMessageBroadcastList(channelBComponents, true);						if (!atonMessageBroadcastList.isEmpty()) {							if (!validateAtonMessageBroadcastList(atonMessageBroadcastList)) {								JOptionPane.showMessageDialog(dialog, "Error. The FATDMA values of channel B are overlapping.");								return false;							}													fatdmaChannelB = new AISAtonStationFATDMAChannel((String) channelBComboBox.getSelectedItem(), atonMessageBroadcastList);						}					} catch (NumberFormatException e) {						JOptionPane.showMessageDialog(dialog, "Error. All FATDMA values of channel B are not valid integers.");						return false;					} catch (IllegalArgumentException e) {						JOptionPane.showMessageDialog(dialog, "The following error occurred when validating FATDMA values of channel B:\n" + e.getMessage());              						return false;												}																}							}		}				int nonRecommendedValueForIncrementForChannelA = 0;		int nonRecommendedValueForIncrementForChannelB = 0;		if (fatdmaChannelA instanceof AISBaseAndReceiverStationFATDMAChannel) {			List<FATDMAReservation> fatdmaScheme = ((AISBaseAndReceiverStationFATDMAChannel) fatdmaChannelA).getFATDMAScheme();			for (FATDMAReservation fatdmaReservation : fatdmaScheme) {				int i = fatdmaReservation.getIncrement().intValue();				if (i != 0 && i != 2 && i != 3 && i != 5 && i != 6 && i != 9 && i != 10 && i != 15 && i != 18 && i != 25 && i != 30 && i != 45						&& i != 50 && i != 75 && i != 90 && i != 125 && i != 225 && i != 250 && i != 375 && i != 450 && i != 750 && i != 1125) {					nonRecommendedValueForIncrementForChannelA = i;					break;				}			}		}		if (fatdmaChannelB instanceof AISBaseAndReceiverStationFATDMAChannel) {			List<FATDMAReservation> fatdmaScheme = ((AISBaseAndReceiverStationFATDMAChannel) fatdmaChannelB).getFATDMAScheme();			for (FATDMAReservation fatdmaReservation : fatdmaScheme) {				int i = fatdmaReservation.getIncrement().intValue();				if (i != 0 && i != 2 && i != 3 && i != 5 && i != 6 && i != 9 && i != 10 && i != 15 && i != 18 && i != 25 && i != 30 && i != 45						&& i != 50 && i != 75 && i != 90 && i != 125 && i != 225 && i != 250 && i != 375 && i != 450 && i != 750 && i != 1125) {					nonRecommendedValueForIncrementForChannelB = i;					break;				}			}		}						boolean doContinue = true;		if (nonRecommendedValueForIncrementForChannelA != 0 || nonRecommendedValueForIncrementForChannelB != 0) {			String msg = "FATDMA reservations for channel ";			if (nonRecommendedValueForIncrementForChannelA != 0) {				msg += "A contains a reservation with increment " + nonRecommendedValueForIncrementForChannelA;			}			if (nonRecommendedValueForIncrementForChannelA != 0 && nonRecommendedValueForIncrementForChannelB != 0) {				msg += " and\nFATDMA reservations for channel ";			}			if (nonRecommendedValueForIncrementForChannelB != 0) {				msg += "B contains a reservation with increment " + nonRecommendedValueForIncrementForChannelB;			}			msg += ".\n";			msg += "According to ITU and IALA recommendations, the following values are recommended\n" +				"to ensure symmetric reservations accross the frame: 0, 2, 3, 5, 6, 9, 10, 15, 18,\n" +				"25, 30, 45, 50, 75, 90, 125, 225, 250, 375, 450, 750, 1125. Are you sure you wish to\n" +				"save this reservation?";							int response = JOptionPane.showConfirmDialog(dialog, msg, "Confirm action", JOptionPane.YES_NO_OPTION);			if (response == JOptionPane.NO_OPTION) {				doContinue = false;			}		}				if (doContinue) {					AISFixedStationData station = getSelectedStationData(stationIndex);			if (station == null) {				station = new AISFixedStationData();			}			try {				station.setStationName(stationNameTextField.getText().trim());				if (stationTypeComboBox.getSelectedIndex() == 0) {					station.setStationType(AISFixedStationType.BASESTATION);				} else if (stationTypeComboBox.getSelectedIndex() == 1) {					station.setStationType(AISFixedStationType.REPEATER); 				} else if (stationTypeComboBox.getSelectedIndex() == 2) {					station.setStationType(AISFixedStationType.RECEIVER); 				} else if (stationTypeComboBox.getSelectedIndex() == 3) {					station.setStationType(AISFixedStationType.ATON); 				}  				station.setLat(new Double(latitudeTextField.getText().replace(",", ".").trim()).doubleValue());                                				station.setLon(new Double(longitudeTextField.getText().replace(",", ".").trim()).doubleValue());  				if (mmsiNumberTextField.getText().trim().isEmpty()) {					station.setMmsi(null);				} else {					station.setMmsi(mmsiNumberTextField.getText().trim());				}				if (transmissionPowerTextField.getText().trim().isEmpty()) {					station.setTransmissionPower(null);				} else {					station.setTransmissionPower(new Double(transmissionPowerTextField.getText().replace(",", ".").trim()));				}				Antenna antenna = station.getAntenna();				if (antennaTypeComboBox.getSelectedIndex() == 0) {					station.setAntenna(null);				} else if (antennaTypeComboBox.getSelectedIndex() == 1) {					if (antenna == null) {						antenna = new Antenna();					}					antenna.setAntennaType(AntennaType.OMNIDIRECTIONAL);                    				} else if (antennaTypeComboBox.getSelectedIndex() == 2) {					if (antenna == null) {						antenna = new Antenna();					}					antenna.setAntennaType(AntennaType.DIRECTIONAL);				}				if (antennaTypeComboBox.getSelectedIndex() == 1 ||						antennaTypeComboBox.getSelectedIndex() == 2) {					if (!antennaHeightTextField.getText().trim().isEmpty()) {						antenna.setAntennaHeight(new Double(antennaHeightTextField.getText().replace(",", ".").trim()).doubleValue());					}					if (!terrainHeightTextField.getText().trim().isEmpty()) {						antenna.setTerrainHeight(new Double(terrainHeightTextField.getText().replace(",", ".").trim()).doubleValue());					}				}				if (antennaTypeComboBox.getSelectedIndex() == 2) {					if (headingTextField.getText().trim().isEmpty()) {                        						antenna.setHeading(null);					} else {						antenna.setHeading(new Integer(headingTextField.getText().trim()));					}					if (fieldOfViewAngleTextField.getText().trim().isEmpty()) { 						antenna.setFieldOfViewAngle(null);					} else {						antenna.setFieldOfViewAngle(new Integer(fieldOfViewAngleTextField.getText().trim()));					}					if (gainTextField.getText().trim().isEmpty()) {             						antenna.setGain(null);					} else {						antenna.setGain(new Double(gainTextField.getText().replace(",", ".").trim()));					}				}				if (antennaTypeComboBox.getSelectedIndex() == 1 ||						antennaTypeComboBox.getSelectedIndex() == 2) {					station.setAntenna(antenna);				}				station.setFATDMAChannelA(fatdmaChannelA);				station.setFATDMAChannelB(fatdmaChannelB);				if (additionalInformationJTextArea.getText().trim().isEmpty()) {					station.setDescription(null);				} else {					station.setDescription(additionalInformationJTextArea.getText().trim());				}			} catch (IllegalArgumentException e) {				JOptionPane.showMessageDialog(dialog, e.getMessage());              				return false;			}			if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.OWN_ACTIVE_STATIONS_LABEL)) {				if (data != null && data.getActiveStations() != null && stationIndex < data.getActiveStations().size()) {					ActiveStation as = data.getActiveStations().get(stationIndex);					if (as.getStations() != null) {						for (int i=0; i<as.getStations().size(); i++) {                        							AISFixedStationData temp = as.getStations().get(i);							if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.OPERATIVE_LABEL) && temp.getStatus().getStatusID() == DerbyDBInterface.STATUS_ACTIVE) {								as.getStations().set(i, station);                            								break;							} else if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL) && temp.getStatus().getStatusID() == DerbyDBInterface.STATUS_PLANNED) {								as.getStations().set(i, station);                            								break;							}						}					}					data.getActiveStations().set(stationIndex, as);				}					   			} else if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.SIMULATION_LABEL)) {				if (data != null && data.getSimulatedStations() != null) {                					List<Simulation> simulatedStations = data.getSimulatedStations();					for (Simulation s : data.getSimulatedStations()) {						if (((String) selectDatasetComboBox.getSelectedItem()).endsWith(s.getName())) {							List<AISFixedStationData> stations = s.getStations();							if (stations != null && stationIndex < stations.size()) {                            								stations.set(stationIndex, station);								s.setStations(stations);								data.setSimulatedStations(simulatedStations);								break;							}						}					}				}						} else if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.STATIONS_OF_ORGANIZATION_LABEL)) {				if (data != null && data.getOtherUsersStations() != null) {                					for (int i=0; i<data.getOtherUsersStations().size(); i++) {						OtherUserStations ous = data.getOtherUsersStations().get(i);						if (((String) selectDatasetComboBox.getSelectedItem()).endsWith(ous.getUser().getOrganizationName())) {							List<ActiveStation> stations = ous.getStations();							if (stations != null && stationIndex < stations.size()) {								ActiveStation as = stations.get(stationIndex);     								EAVDAMUser user = data.getUser();                            								Map<EAVDAMUser, AISFixedStationData> proposals = new HashMap<EAVDAMUser, AISFixedStationData>();								proposals.put(user, station);                                                        								as.setProposals(proposals);								ous.getStations().set(stationIndex, as);                        								data.getOtherUsersStations().set(i, ous);								break;							}						}					}				}			}						DBHandler.saveData(data);    						return true;   				} else {			return false;		}	}	    /**     * Turns operative station into planned station.     *     * @param stationIndex  Index of the station in the stations list     */    private void turnOperativeIntoPlannedStation(int stationIndex) {        if (data == null ||  data.getActiveStations() == null || data.getActiveStations().isEmpty()) {            return;        }         AISFixedStationData newPlannedStationData = new AISFixedStationData();        try {            newPlannedStationData.setStationName(stationNameTextField.getText().trim());            if (stationTypeComboBox.getSelectedIndex() == 0) {                newPlannedStationData.setStationType(AISFixedStationType.BASESTATION);            } else if (stationTypeComboBox.getSelectedIndex() == 1) {                newPlannedStationData.setStationType(AISFixedStationType.REPEATER);             } else if (stationTypeComboBox.getSelectedIndex() == 2) {                newPlannedStationData.setStationType(AISFixedStationType.RECEIVER);             } else if (stationTypeComboBox.getSelectedIndex() == 3) {                newPlannedStationData.setStationType(AISFixedStationType.ATON);             }              newPlannedStationData.setLat(new Double(latitudeTextField.getText().replace(",", ".").trim()).doubleValue());                                            newPlannedStationData.setLon(new Double(longitudeTextField.getText().replace(",", ".").trim()).doubleValue());              if (mmsiNumberTextField.getText().trim().isEmpty()) {                newPlannedStationData.setMmsi(null);            } else {                newPlannedStationData.setMmsi(mmsiNumberTextField.getText().trim());            }            if (transmissionPowerTextField.getText().trim().isEmpty()) {                newPlannedStationData.setTransmissionPower(null);            } else {                newPlannedStationData.setTransmissionPower(new Double(transmissionPowerTextField.getText().replace(",", ".").trim()));            }            Antenna antenna = new Antenna();            if (antennaTypeComboBox.getSelectedIndex() == 0) {                newPlannedStationData.setAntenna(null);            } else if (antennaTypeComboBox.getSelectedIndex() == 1) {                antenna.setAntennaType(AntennaType.OMNIDIRECTIONAL);                                } else if (antennaTypeComboBox.getSelectedIndex() == 2) {                antenna.setAntennaType(AntennaType.DIRECTIONAL);            }            if (antennaTypeComboBox.getSelectedIndex() == 1 ||                    antennaTypeComboBox.getSelectedIndex() == 2) {                if (!antennaHeightTextField.getText().trim().isEmpty()) {                    antenna.setAntennaHeight(new Double(antennaHeightTextField.getText().replace(",", ".").trim()).doubleValue());                }                if (!terrainHeightTextField.getText().trim().isEmpty()) {                    antenna.setTerrainHeight(new Double(terrainHeightTextField.getText().replace(",", ".").trim()).doubleValue());                }            }            if (antennaTypeComboBox.getSelectedIndex() == 2) {                if (headingTextField.getText().trim().isEmpty()) {                                            antenna.setHeading(null);                } else {                    antenna.setHeading(new Integer(headingTextField.getText().trim()));                }                if (fieldOfViewAngleTextField.getText().trim().isEmpty()) {                     antenna.setFieldOfViewAngle(null);                } else {                    antenna.setFieldOfViewAngle(new Integer(fieldOfViewAngleTextField.getText().trim()));                }                if (gainTextField.getText().trim().isEmpty()) {                                 antenna.setGain(null);                } else {                    antenna.setGain(new Double(gainTextField.getText().replace(",", ".").trim()));                }            }            if (antennaTypeComboBox.getSelectedIndex() == 1 ||                    antennaTypeComboBox.getSelectedIndex() == 2) {                newPlannedStationData.setAntenna(antenna);            }			if (stationTypeComboBox.getSelectedIndex() == 0 || stationTypeComboBox.getSelectedIndex() == 1) {  // base station or repeater				if (!((String) channelAComboBox.getSelectedItem()).equals("NULL") && channelAPanel != null) { 					Component[] channelAComponents = channelAPanel.getComponents();									if (channelAComponents.length > 1) {										List<FATDMAReservation> fatdmaScheme = getFATDMAScheme(channelAComponents, false);						if (!fatdmaScheme.isEmpty()) {							newPlannedStationData.setFATDMAChannelA(new AISBaseAndReceiverStationFATDMAChannel((String) channelAComboBox.getSelectedItem(), fatdmaScheme));						}									}				}				if (!((String) channelBComboBox.getSelectedItem()).equals("NULL") && channelBPanel != null) { 									Component[] channelBComponents = channelBPanel.getComponents();									if (channelBComponents.length > 1) {										List<FATDMAReservation> fatdmaScheme = getFATDMAScheme(channelBComponents, false);						if (!fatdmaScheme.isEmpty()) {							newPlannedStationData.setFATDMAChannelB(new AISBaseAndReceiverStationFATDMAChannel((String) channelBComboBox.getSelectedItem(), fatdmaScheme));						}								}								}						} else if (stationTypeComboBox.getSelectedIndex() == 3) {  // aton station				if (!((String) channelAComboBox.getSelectedItem()).equals("NULL") && channelAPanel != null) { 					Component[] channelAComponents = channelAPanel.getComponents();					if (channelAComponents.length > 1) {										List<AtonMessageBroadcastRate> atonMessageBroadcastList = getAtonMessageBroadcastList(channelAComponents, false);						if (!atonMessageBroadcastList.isEmpty()) {							newPlannedStationData.setFATDMAChannelA(new AISAtonStationFATDMAChannel((String) channelAComboBox.getSelectedItem(), atonMessageBroadcastList));											}					}				}				if (!((String) channelBComboBox.getSelectedItem()).equals("NULL") && channelBPanel != null) { 									Component[] channelBComponents = channelBPanel.getComponents();					if (channelBComponents.length > 1) {										List<AtonMessageBroadcastRate> atonMessageBroadcastList = getAtonMessageBroadcastList(channelBComponents, false);						if (!atonMessageBroadcastList.isEmpty()) {							newPlannedStationData.setFATDMAChannelB(new AISAtonStationFATDMAChannel((String) channelBComboBox.getSelectedItem(), atonMessageBroadcastList));						}													}						}								}							            if (additionalInformationJTextArea.getText().trim().isEmpty()) {                newPlannedStationData.setDescription(null);            } else {                newPlannedStationData.setDescription(additionalInformationJTextArea.getText().trim());            }            AISFixedStationStatus status = new AISFixedStationStatus();            status.setStatusID(DerbyDBInterface.STATUS_PLANNED);            status.setStartDate(new Date(System.currentTimeMillis()));            newPlannedStationData.setStatus(status);        } catch (IllegalArgumentException e) {            // should not occur as the station is saved        }		        ActiveStation as = data.getActiveStations().get(stationIndex);        		boolean foundPlannedStation = false;        for (int i=0; i<as.getStations().size(); i++) {                                    AISFixedStationData temp = as.getStations().get(i);			            if (temp.getStatus().getStatusID() == DerbyDBInterface.STATUS_PLANNED) {            	            	newPlannedStationData.setStationDBID(temp.getStationDBID());            	newPlannedStationData.setOperator(temp.getOperator());            	as.getStations().set(i, newPlannedStationData);				foundPlannedStation = true;                break;                            }            data.getActiveStations().set(stationIndex, as);                    }				if (!foundPlannedStation) {            as.getStations().add(newPlannedStationData);			data.getActiveStations().set(stationIndex, as);		}                    DBHandler.saveData(data);    }		          /**     * Turns planned station into operative station.     *     * @param stationIndex  Index of the station in the stations list     */    private void turnPlannedIntoOperativeStation(int stationIndex) {        if (data == null ||  data.getActiveStations() == null || data.getActiveStations().isEmpty()) {            return;        }         AISFixedStationData newActiveStationData = new AISFixedStationData();        try {            newActiveStationData.setStationName(stationNameTextField.getText().trim());            if (stationTypeComboBox.getSelectedIndex() == 0) {                newActiveStationData.setStationType(AISFixedStationType.BASESTATION);            } else if (stationTypeComboBox.getSelectedIndex() == 1) {                newActiveStationData.setStationType(AISFixedStationType.REPEATER);             } else if (stationTypeComboBox.getSelectedIndex() == 2) {                newActiveStationData.setStationType(AISFixedStationType.RECEIVER);             } else if (stationTypeComboBox.getSelectedIndex() == 3) {                newActiveStationData.setStationType(AISFixedStationType.ATON);             }              newActiveStationData.setLat(new Double(latitudeTextField.getText().replace(",", ".").trim()).doubleValue());                                            newActiveStationData.setLon(new Double(longitudeTextField.getText().replace(",", ".").trim()).doubleValue());              if (mmsiNumberTextField.getText().trim().isEmpty()) {                newActiveStationData.setMmsi(null);            } else {                newActiveStationData.setMmsi(mmsiNumberTextField.getText().trim());            }            if (transmissionPowerTextField.getText().trim().isEmpty()) {                newActiveStationData.setTransmissionPower(null);            } else {                newActiveStationData.setTransmissionPower(new Double(transmissionPowerTextField.getText().replace(",", ".").trim()));            }            Antenna antenna = new Antenna();            if (antennaTypeComboBox.getSelectedIndex() == 0) {                newActiveStationData.setAntenna(null);            } else if (antennaTypeComboBox.getSelectedIndex() == 1) {                antenna.setAntennaType(AntennaType.OMNIDIRECTIONAL);                                } else if (antennaTypeComboBox.getSelectedIndex() == 2) {                antenna.setAntennaType(AntennaType.DIRECTIONAL);            }            if (antennaTypeComboBox.getSelectedIndex() == 1 ||                    antennaTypeComboBox.getSelectedIndex() == 2) {                if (!antennaHeightTextField.getText().trim().isEmpty()) {                    antenna.setAntennaHeight(new Double(antennaHeightTextField.getText().replace(",", ".").trim()).doubleValue());                }                if (!terrainHeightTextField.getText().trim().isEmpty()) {                    antenna.setTerrainHeight(new Double(terrainHeightTextField.getText().replace(",", ".").trim()).doubleValue());                }            }            if (antennaTypeComboBox.getSelectedIndex() == 2) {                if (headingTextField.getText().trim().isEmpty()) {                                            antenna.setHeading(null);                } else {                    antenna.setHeading(new Integer(headingTextField.getText().trim()));		                }                if (fieldOfViewAngleTextField.getText().trim().isEmpty()) {                     antenna.setFieldOfViewAngle(null);                } else {                    antenna.setFieldOfViewAngle(new Integer(fieldOfViewAngleTextField.getText().trim()));                }                if (gainTextField.getText().trim().isEmpty()) {                                 antenna.setGain(null);                } else {                    antenna.setGain(new Double(gainTextField.getText().replace(",", ".").trim()));                }            }            if (antennaTypeComboBox.getSelectedIndex() == 1 ||                    antennaTypeComboBox.getSelectedIndex() == 2) {                newActiveStationData.setAntenna(antenna);            }			if (stationTypeComboBox.getSelectedIndex() == 0 || stationTypeComboBox.getSelectedIndex() == 1) {  // base station or repeater				if (!((String) channelAComboBox.getSelectedItem()).equals("NULL") && channelAPanel != null) { 					Component[] channelAComponents = channelAPanel.getComponents();									if (channelAComponents.length > 1) {										List<FATDMAReservation> fatdmaScheme = getFATDMAScheme(channelAComponents, false);						if (!fatdmaScheme.isEmpty()) {							newActiveStationData.setFATDMAChannelA(new AISBaseAndReceiverStationFATDMAChannel((String) channelAComboBox.getSelectedItem(), fatdmaScheme));						}									}				}				if (!((String) channelAComboBox.getSelectedItem()).equals("NULL") && channelAPanel != null) {					Component[] channelBComponents = channelBPanel.getComponents();									if (channelBComponents.length > 1) {										List<FATDMAReservation> fatdmaScheme = getFATDMAScheme(channelBComponents, false);						if (!fatdmaScheme.isEmpty()) {							newActiveStationData.setFATDMAChannelB(new AISBaseAndReceiverStationFATDMAChannel((String) channelBComboBox.getSelectedItem(), fatdmaScheme));						}								}								}						} else if (stationTypeComboBox.getSelectedIndex() == 3) {  // aton station				if (!((String) channelAComboBox.getSelectedItem()).equals("NULL") && channelAPanel != null) {					Component[] channelAComponents = channelAPanel.getComponents();					if (channelAComponents.length > 1) {										List<AtonMessageBroadcastRate> atonMessageBroadcastList = getAtonMessageBroadcastList(channelAComponents, false);						if (!atonMessageBroadcastList.isEmpty()) {							newActiveStationData.setFATDMAChannelA(new AISAtonStationFATDMAChannel((String) channelAComboBox.getSelectedItem(), atonMessageBroadcastList));											}					}				}				if (!((String) channelBComboBox.getSelectedItem()).equals("NULL") && channelBPanel != null) {									Component[] channelBComponents = channelBPanel.getComponents();					if (channelBComponents.length > 1) {										List<AtonMessageBroadcastRate> atonMessageBroadcastList = getAtonMessageBroadcastList(channelBComponents, false);						if (!atonMessageBroadcastList.isEmpty()) {							newActiveStationData.setFATDMAChannelB(new AISAtonStationFATDMAChannel((String) channelBComboBox.getSelectedItem(), atonMessageBroadcastList));						}													}								}			}			            if (additionalInformationJTextArea.getText().trim().isEmpty()) {                newActiveStationData.setDescription(null);            } else {                newActiveStationData.setDescription(additionalInformationJTextArea.getText().trim());            }            AISFixedStationStatus status = new AISFixedStationStatus();            status.setStatusID(DerbyDBInterface.STATUS_ACTIVE);            status.setStartDate(new Date(System.currentTimeMillis()));            newActiveStationData.setStatus(status);        } catch (IllegalArgumentException e) {            // should not occur as the station is saved        }		        ActiveStation as = data.getActiveStations().get(stationIndex);        		boolean foundActiveStation = false;        for (int i=0; i<as.getStations().size(); i++) {                                    AISFixedStationData temp = as.getStations().get(i);			            if (temp.getStatus().getStatusID() == DerbyDBInterface.STATUS_ACTIVE) {            	System.out.println("Found active station. Changing it to old...");//                temp.getStatus().setStatusID(DerbyDBInterface.STATUS_OLD);//                temp.getStatus().setStartDate(new Date(System.currentTimeMillis()));//                as.getStations().set(i, temp);            	newActiveStationData.setStationDBID(temp.getStationDBID());            	newActiveStationData.setOperator(temp.getOperator());            	as.getStations().set(i, newActiveStationData);				foundActiveStation = true;                break;                            }                         data.getActiveStations().set(stationIndex, as);                    }		if (!foundActiveStation) {            as.getStations().add(newActiveStationData);			data.getActiveStations().set(stationIndex, as);		}        DBHandler.saveData(data);			}    /**      * Deletes a station.     *     * @param stationIndex  Index of the station to be deleted     */    private void deleteStation(int stationIndex) {                if (data != null) {                        if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.OWN_ACTIVE_STATIONS_LABEL)) {                            if (data != null && data.getActiveStations() != null && stationIndex < data.getActiveStations().size()) {                	//Create an object that tells which station is removed = Is stored as an old station...                	EAVDAMData remove = new EAVDAMData();                	remove.setUser(data.getUser());                	List<ActiveStation> list = new ArrayList<ActiveStation>();                	AISFixedStationData removeAIS = data.getActiveStations().get(stationIndex).getStations().get(0);                	AISFixedStationStatus status = new AISFixedStationStatus();                	status.setEndDate(new Date(System.currentTimeMillis()));                	status.setStatusID(DerbyDBInterface.STATUS_OLD);                	removeAIS.setStatus(status);                	ActiveStation as = new ActiveStation();                	List<AISFixedStationData> aisList = new ArrayList<AISFixedStationData>();                	aisList.add(removeAIS);                	as.setStations(aisList);                	list.add(as);                	remove.setActiveStations(list);                	DBHandler.saveData(remove);                	data.getActiveStations().remove(stationIndex);                }                                   } else if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.SIMULATION_LABEL)) {                if (data != null && data.getSimulatedStations() != null) {                                    List<Simulation> simulatedStations = data.getSimulatedStations();                    for (Simulation s : data.getSimulatedStations()) {                        if (((String) selectDatasetComboBox.getSelectedItem()).endsWith(s.getName())) {                            s.getStations().remove(stationIndex);                            data.setSimulatedStations(simulatedStations);                            break;                        }                    }                }				DBHandler.saveData(data);             }                                    }    }	    /**      * Deletes an operative station.     *     * @param stationIndex  Index of the station to be deleted     */    private void deleteOperativeStation(int stationIndex) {                if (data != null) {                        if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.OWN_ACTIVE_STATIONS_LABEL)) {                            if (data != null && data.getActiveStations() != null && stationIndex < data.getActiveStations().size()) {					ActiveStation as = data.getActiveStations().get(stationIndex);        					for (int i=0; i<as.getStations().size(); i++) {                        						AISFixedStationData temp = as.getStations().get(i);									if (temp.getStatus().getStatusID() == DerbyDBInterface.STATUS_ACTIVE) {							DBHandler.deleteStation(temp.getStationDBID()); 							as.getStations().remove(i);							break;						}					}				    data.getActiveStations().set(stationIndex, as);					DBHandler.saveData(data);				}                            }		}	}			    /**      * Deletes a planned station.     *     * @param stationIndex  Index of the station to be deleted     */    private void deletePlannedStation(int stationIndex) {                if (data != null) {                        if (((String) selectDatasetComboBox.getSelectedItem()).startsWith(StationInformationMenuItem.OWN_ACTIVE_STATIONS_LABEL)) {                            if (data != null && data.getActiveStations() != null && stationIndex < data.getActiveStations().size()) {					ActiveStation as = data.getActiveStations().get(stationIndex);        					for (int i=0; i<as.getStations().size(); i++) {                        						AISFixedStationData temp = as.getStations().get(i);									if (temp.getStatus().getStatusID() == DerbyDBInterface.STATUS_PLANNED) {							DBHandler.deleteStation(temp.getStationDBID()); 							as.getStations().remove(i);							break;						}					}				    data.getActiveStations().set(stationIndex, as);					DBHandler.saveData(data);				}                            }		}	}        private void deleteProposalFrom(int stationIndex, String organizationName) {        if (data != null) {            ActiveStation as = data.getActiveStations().get(stationIndex);            Map<EAVDAMUser, AISFixedStationData> proposals = as.getProposals();            EAVDAMUser user  = null;            for (Object key : proposals.keySet()) {                 EAVDAMUser temp = (EAVDAMUser) key;                if (temp.getOrganizationName().equals(organizationName)) {                    user = temp;                    break;                                    }            }            if (user != null) {                proposals.remove(user);            }            as.setProposals(proposals);            data.getActiveStations().set(stationIndex, as);            DBHandler.saveData(data);                 }    }        private void addProposal(int stationIndex, String organizationName) {        if (data != null) {                        for (int i=0; i<data.getOtherUsersStations().size(); i++) {                OtherUserStations ous = data.getOtherUsersStations().get(i);                if (ous.getUser().getOrganizationName().equals(organizationName)) {                    if (ous.getStations() != null && stationIndex < ous.getStations().size()) {                                    ActiveStation as = ous.getStations().get(stationIndex);                        AISFixedStationData currentData = getSelectedStationData(stationIndex);                                                Map<EAVDAMUser, AISFixedStationData> proposals = new HashMap<EAVDAMUser, AISFixedStationData>();                                    EAVDAMUser user = data.getUser();                        AISFixedStationData proposedData = new AISFixedStationData();                        proposedData.setStationName(currentData.getStationName());                        proposedData.setLat(currentData.getLat());                        proposedData.setLon(currentData.getLon());                        proposedData.setMmsi(currentData.getMmsi());                        proposedData.setTransmissionPower(currentData.getTransmissionPower());                        proposedData.setDescription(currentData.getDescription());                        proposedData.setTransmissionCoverage(currentData.getTransmissionCoverage());                        proposedData.setAntenna(currentData.getAntenna());						proposedData.setFATDMAChannelA(currentData.getFATDMAChannelA());						proposedData.setFATDMAChannelB(currentData.getFATDMAChannelB());						                        proposedData.setFatdmaAllocation(currentData.getFatdmaAllocation());                                                                                                                                                                                                proposedData.setStationType(currentData.getStationType());                        proposedData.setOperator(currentData.getOperator());                          proposedData.setStatus(currentData.getStatus());                          proposedData.setAnything(currentData.getAnything());                           proposals.put(user, proposedData);                        as.setProposals(proposals);                        ous.getStations().set(stationIndex, as);                                                data.getOtherUsersStations().set(i, ous);                        DBHandler.saveData(data);                        break;                    }                }            }        }    }            private void deleteProposalTo(int stationIndex, String organizationName) {        if (data != null) {                        for (int i=0; i<data.getOtherUsersStations().size(); i++) {                OtherUserStations ous = data.getOtherUsersStations().get(i);                if (ous.getUser().getOrganizationName().equals(organizationName)) {                    if (ous.getStations() != null && stationIndex < ous.getStations().size()) {                                    ActiveStation as = ous.getStations().get(stationIndex);                        as.setProposals(null);                        ous.getStations().set(stationIndex, as);                        data.getOtherUsersStations().set(i, ous);                        DBHandler.saveData(data);                        break;                    }                }            }        }    }		/** 	 * Checks whether the FATDMA scheme contains overlapping reservations,	 * e.g., startslot=100, blocksize=2, increment=1000 and startslot=50,	 * blocksize=1, increment=50, will result in block 101 beingg reserved	 * twice and in that case this method will return false	 */	private boolean validateFATDMAScheme(List<FATDMAReservation> fatdmaScheme) {		List<Integer> reservedBlocks = new ArrayList<Integer>();		if (fatdmaScheme != null) {			for (FATDMAReservation fatdmaReservation : fatdmaScheme) {				Integer startslot = fatdmaReservation.getStartslot();				Integer blockSize = fatdmaReservation.getBlockSize();				Integer increment = fatdmaReservation.getIncrement();				if (startslot != null && blockSize != null && increment != null) {					int startslotInt = startslot.intValue();					int blockSizeInt = blockSize.intValue();					int incrementInt = increment.intValue();					if (incrementInt == 0) {						for (int i=0; i<blockSizeInt; i++) {							Integer slot = new Integer(startslotInt+i);							if (reservedBlocks.contains(slot)) {								return false;							} else {								reservedBlocks.add(slot);							}						}													} else if (incrementInt > 0) {						int i = 0;						while (i*incrementInt <= 2249) {														for (int j=0; j<blockSizeInt; j++) {								Integer slot = new Integer(startslotInt+j+(i*incrementInt));								if (reservedBlocks.contains(slot)) {									return false;								} else {									reservedBlocks.add(slot);								}							}							i++;						}					}				}			}		}		return true;	}		/** 	 * Checks whether the FATDMA scheme contains overlapping reservations,	 * e.g., startslot=100, blocksize=2, increment=1000 and startslot=50,	 * blocksize=1, increment=50, will result in block 101 beingg reserved	 * twice and in that case this method will return false	 */	private boolean validateAtonMessageBroadcastList(List<AtonMessageBroadcastRate> atonMessageBroadcastList) {		List<Integer> reservedBlocks = new ArrayList<Integer>();		if (atonMessageBroadcastList != null) {			for (AtonMessageBroadcastRate atonMessageBroadcastRate : atonMessageBroadcastList) {				Integer startslot = atonMessageBroadcastRate.getStartslot();			    Integer blockSize = atonMessageBroadcastRate.getBlockSize();			    Integer increment = atonMessageBroadcastRate.getIncrement();				if (startslot != null && blockSize != null && increment != null) {					int startslotInt = startslot.intValue();					int blockSizeInt = blockSize.intValue();					int incrementInt = increment.intValue();					if (incrementInt == 0) {						for (int i=0; i<blockSizeInt; i++) {							Integer slot = new Integer(startslotInt+i);							if (reservedBlocks.contains(slot)) {								return false;							} else {								reservedBlocks.add(slot);							}						}													} else if (incrementInt > 0) {						int i = 0;						while (i*incrementInt <= 2249) {														for (int j=0; j<blockSizeInt; j++) {								Integer slot = new Integer(startslotInt+j+(i*incrementInt));								if (reservedBlocks.contains(slot)) {									return false;								} else {									reservedBlocks.add(slot);								}							}							i++;						}					}				}			}		}		return true;	}	    /**      * Checks whether the form fields have changed.     *     * @param stationIndex Index of the station     * @return  True if the fields have changed, false if not     */    private boolean isChanged(int stationIndex) {                if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals(StationInformationMenuItem.PLANNED_LABEL) ||                tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.SIMULATED_LABEL) ||                tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).startsWith(StationInformationMenuItem.PROPOSAL_TO_LABEL)) {            AISFixedStationData station = getSelectedStationData(stationIndex);            if (station == null) {                return true;            }            if (station.getStationName() == null && !stationNameTextField.getText().isEmpty()) {                return true;            }                     if (!station.getStationName().equals(stationNameTextField.getText())) {                return true;            }                      if (station.getStationType() == null) {                return true;            }                      if (station.getStationType() == AISFixedStationType.BASESTATION && stationTypeComboBox.getSelectedIndex() != 0) {                return true;            }            if (station.getStationType() == AISFixedStationType.REPEATER && stationTypeComboBox.getSelectedIndex() != 1) {                return true;            }                       if (station.getStationType() == AISFixedStationType.RECEIVER && stationTypeComboBox.getSelectedIndex() != 2) {                return true;            }                    if (station.getStationType() == AISFixedStationType.ATON && stationTypeComboBox.getSelectedIndex() != 3) {                return true;            }                       try {                if (Double.isNaN(station.getLat()) && !latitudeTextField.getText().isEmpty()) {                    return true;                }                if (!Double.isNaN(station.getLat()) && station.getLat() != (new Double(latitudeTextField.getText().replace(",", ".").trim()).doubleValue())) {                    return true;                }            } catch (NumberFormatException ex) {                return true;            }                      try {                if (Double.isNaN(station.getLon()) && !longitudeTextField.getText().isEmpty()) {                    return true;                }                if (!Double.isNaN(station.getLon()) && station.getLon() != (new Double(longitudeTextField.getText().replace(",", ".").trim()).doubleValue())) {                    return true;                }            } catch (NumberFormatException ex) {                return true;            }            if (station.getMmsi() == null && !mmsiNumberTextField.getText().isEmpty()) {                return true;            }                                 if (station.getMmsi() != null && !station.getMmsi().equals(mmsiNumberTextField.getText())) {                return true;            }                 if (station.getTransmissionPower() == null && !transmissionPowerTextField.getText().isEmpty()) {                return true;            }            try {                       if (station.getTransmissionPower() != null && !station.getTransmissionPower().equals(new Double(transmissionPowerTextField.getText().replace(",", ".").trim()))) {                    return true;                }            } catch (NumberFormatException ex) {                    return true;                      }                      if (station.getStatus() == null) {                return true;            }                 Antenna antenna = station.getAntenna();            if (antenna == null && antennaTypeComboBox.getSelectedIndex() != 0) {                return true;            }            if (antenna != null && antenna.getAntennaType() == null && antennaTypeComboBox.getSelectedIndex() != 0) {                return true;            }            if (antenna != null && antenna.getAntennaType() == AntennaType.OMNIDIRECTIONAL && antennaTypeComboBox.getSelectedIndex() != 1) {                return true;            }            if (antenna != null && antenna.getAntennaType() == AntennaType.DIRECTIONAL && antennaTypeComboBox.getSelectedIndex() != 2) {                return true;            }                                          if (antenna != null && Double.isNaN(antenna.getAntennaHeight()) && !antennaHeightTextField.getText().isEmpty()) {                return true;            }                    if (antenna != null && !Double.isNaN(antenna.getAntennaHeight())) {                try {                           if (antenna.getAntennaHeight() != new Double(antennaHeightTextField.getText().replace(",", ".").trim()).doubleValue()) {                        return true;                    }                } catch (NumberFormatException ex) {                    return true;                }            }                                      if (antenna != null && Double.isNaN(antenna.getTerrainHeight()) && !terrainHeightTextField.getText().isEmpty()) {                return true;            }            if (antenna != null && !Double.isNaN(antenna.getTerrainHeight())) {                            try {                           if (antenna.getTerrainHeight() != new Double(terrainHeightTextField.getText().replace(",", ".").trim()).doubleValue()) {                        return true;                    }                                } catch (NumberFormatException ex) {                    return true;                }            }                                                         if (antenna != null && antenna.getAntennaType() == AntennaType.DIRECTIONAL) {                if (antenna.getHeading() == null && !headingTextField.getText().isEmpty()) {                    return true;                }                try {                           if (antenna.getHeading() != null && !antenna.getHeading().equals(new Integer(headingTextField.getText()))) {                        return true;                    }                } catch (NumberFormatException ex) {                    return true;                }                              if (antenna.getFieldOfViewAngle() == null && !fieldOfViewAngleTextField.getText().isEmpty()) {                    return true;                }                try {                           if (antenna.getFieldOfViewAngle() != null && !antenna.getFieldOfViewAngle().equals(new Integer(fieldOfViewAngleTextField.getText()))) {                        return true;                    }                } catch (NumberFormatException ex) {                    return true;                }                         if (antenna.getGain() == null && !gainTextField.getText().isEmpty()) {                    return true;                }                try {                           if (antenna.getGain() != null && !antenna.getGain().equals(new Integer(gainTextField.getText()))) {                        return true;                    }                } catch (NumberFormatException ex) {                    return true;                }            }			if (station.getFATDMAChannelA() == null) {				if (!((String) channelAComboBox.getSelectedItem()).equals("NULL")) {					return true;				}			} else {				if (!station.getFATDMAChannelA().getChannelName().equals((String) channelAComboBox.getSelectedItem())) {					return true;				}				if (station.getFATDMAChannelA() instanceof AISBaseAndReceiverStationFATDMAChannel) {					AISBaseAndReceiverStationFATDMAChannel fatdmaChannel = (AISBaseAndReceiverStationFATDMAChannel) station.getFATDMAChannelA();					List<FATDMAReservation> fatdmaScheme = fatdmaChannel.getFATDMAScheme();					if (fatdmaScheme == null) {						if (channelAPanel == null || channelAPanel.getComponents().length > 1) {							return true;						}					} else if (channelAPanel != null) {											List<FATDMAReservation> currentFATDMAScheme = getFATDMAScheme(channelAPanel.getComponents(), false);						if (fatdmaScheme.size() != currentFATDMAScheme.size()) {							return true;						} else {							for (int i=0; i<fatdmaScheme.size(); i++) {								FATDMAReservation fatdmaReservation = fatdmaScheme.get(i);								FATDMAReservation currentFATDMAReservation = currentFATDMAScheme.get(i);								if (!fatdmaReservation.equals(currentFATDMAReservation)) {									return true;								}							}						}					}								} else if (station.getFATDMAChannelA() instanceof AISAtonStationFATDMAChannel) {					AISAtonStationFATDMAChannel fatdmaChannel = (AISAtonStationFATDMAChannel) station.getFATDMAChannelA();					List<AtonMessageBroadcastRate> atonMessageBroadcastList = fatdmaChannel.getAtonMessageBroadcastList();					if (atonMessageBroadcastList == null) {						if (channelAPanel != null || channelAPanel.getComponents().length > 1) {							return true;						}					} else if (channelAPanel != null) {						List<AtonMessageBroadcastRate> currentAtonMessageBroadcastList = getAtonMessageBroadcastList(channelAPanel.getComponents(), false);						if (atonMessageBroadcastList.size() != currentAtonMessageBroadcastList.size()) {							return true;						} else {							for (int i=0; i<atonMessageBroadcastList.size(); i++) {								AtonMessageBroadcastRate atonMessageBroadcastRate = atonMessageBroadcastList.get(i);								AtonMessageBroadcastRate currentAtonMessageBroadcastRate = currentAtonMessageBroadcastList.get(i);								if (!atonMessageBroadcastRate.equals(currentAtonMessageBroadcastRate)) {									return true;								}							}						}					}								}			}			/*			if (station.getFATDMAChannelB() == null) {				if (!((String) channelBComboBox.getSelectedItem()).equals("NULL")) {					return true;				}			} else {				if (!station.getFATDMAChannelB().getChannelName().equals((String) channelBComboBox.getSelectedItem())) {					return true;				}				if (station.getFATDMAChannelB() instanceof AISBaseAndReceiverStationFATDMAChannel) {					AISBaseAndReceiverStationFATDMAChannel fatdmaChannel = (AISBaseAndReceiverStationFATDMAChannel) station.getFATDMAChannelB();					List<FATDMAReservation> fatdmaScheme = fatdmaChannel.getFATDMAScheme();					if (fatdmaScheme == null) {						if (channelBPanel == null || channelBPanel.getComponents().length > 6) {							return true;						}					} else {						List<FATDMAReservation> currentFATDMAScheme = getFATDMAScheme(channelBPanel.getComponents());						if (fatdmaScheme.size() != currentFATDMAScheme.size()) {							return true;						} else {							for (int i=0; i<fatdmaScheme.size(); i++) {								FATDMAReservation fatdmaReservation = fatdmaScheme.get(i);								FATDMAReservation currentFATDMAReservation = currentFATDMAScheme.get(i);								if (!fatdmaReservation.equals(currentFATDMAReservation)) {									return true;								}							}						}					}								} else if (station.getFATDMAChannelB() instanceof AISAtonStationFATDMAChannel) {					AISAtonStationFATDMAChannel fatdmaChannel = (AISAtonStationFATDMAChannel) station.getFATDMAChannelB();					List<AtonMessageBroadcastRate> atonMessageBroadcastList = fatdmaChannel.getAtonMessageBroadcastList();					if (atonMessageBroadcastList == null) {						if (channelBPanel == null || channelBPanel.getComponents().length > 9) {							return true;						}					} else if (channelBPanel != null) {						List<AtonMessageBroadcastRate> currentAtonMessageBroadcastList = getAtonMessageBroadcastList(channelBPanel.getComponents());						if (atonMessageBroadcastList.size() != currentAtonMessageBroadcastList.size()) {							return true;						} else {							for (int i=0; i<atonMessageBroadcastList.size(); i++) {								AtonMessageBroadcastRate atonMessageBroadcastRate = atonMessageBroadcastList.get(i);								AtonMessageBroadcastRate currentAtonMessageBroadcastRate = currentAtonMessageBroadcastList.get(i);								if (!atonMessageBroadcastRate.equals(currentAtonMessageBroadcastRate)) {									return true;								}							}						}					}				}						}				*/						            if (station.getDescription() == null && !additionalInformationJTextArea.getText().isEmpty()) {                return true;            }                     if (station.getDescription() != null && !station.getDescription().equals(additionalInformationJTextArea.getText())) {                return true;            }            return false;                } else {            return false;        }    }}